// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package repo

import (
	"context"
	"database/sql"
)

const countBooks = `-- name: CountBook :one
SELECT COUNT(*) AS count FROM books
`

func (q *Queries) CountBook(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBooks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  title, author, isbn, genre
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, title, author, isbn, genre, created_at, updated_at
`

type CreateBookParams struct {
	Title  string
	Author sql.NullString
	Isbn   sql.NullString
	Genre  sql.NullString
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Title,
		arg.Author,
		arg.Isbn,
		arg.Genre,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Isbn,
		&i.Genre,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = ?
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, title, author, isbn, genre, created_at, updated_at FROM books
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Isbn,
		&i.Genre,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBook = `-- name: ListBook :many
SELECT id, title, author, isbn, genre, created_at, updated_at FROM books
ORDER BY created_at DESC
LIMIT ?
OFFSET ?
`

type ListBookParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListBook(ctx context.Context, arg ListBookParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBook, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Isbn,
			&i.Genre,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET title = ?,
    author = ?,
    isbn = ?,
    genre = ?
WHERE id = ?
RETURNING id, title, author, isbn, genre, created_at, updated_at
`

type UpdateBookParams struct {
	Title  string
	Author sql.NullString
	Isbn   sql.NullString
	Genre  sql.NullString
	ID     int64
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook,
		arg.Title,
		arg.Author,
		arg.Isbn,
		arg.Genre,
		arg.ID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Isbn,
		&i.Genre,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
