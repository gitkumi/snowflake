package storage

import (
	"io"
	"mime/multipart"
	"os"
	"path"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
)

type S3Storage struct {
	AccessKey   string
	SecretKey   string
	EndpointUrl string
	Region      string
	Bucket      string
}

func (s *S3Storage) createSession() (*s3.S3, error) {
	sess, err := session.NewSession(&aws.Config{
		Credentials:      credentials.NewStaticCredentials(s.AccessKey, s.SecretKey, ""),
		Region:           &s.Region,
		Endpoint:         &s.EndpointUrl,
		DisableSSL:       aws.Bool(true),
		S3ForcePathStyle: aws.Bool(true),
	})

	if err != nil {
		return nil, err
	}

	return s3.New(sess), nil
}

func createLocalPath(keys ...string) (string, error) {
	localPath := os.TempDir()
	for _, key := range keys {
		localPath = path.Join(localPath, key)
	}

	err := os.MkdirAll(path.Dir(localPath), os.ModePerm)
	if err != nil {
		return "", err
	}

	return localPath, nil
}

func (s *S3Storage) Get(key string) (string, error) {
	localPath, err := createLocalPath(key)
	if err != nil {
		return "", err
	}

	sess, err := s.createSession()
	if err != nil {
		return "", err
	}

	object, err := sess.GetObject(&s3.GetObjectInput{
		Bucket: &s.Bucket,
	})
	if err != nil {
		return "", err
	}

	content, err := io.ReadAll(object.Body)
	if err != nil {
		return "", err
	}

	err = os.WriteFile(localPath, content, os.ModePerm)
	if err != nil {
		return "", err
	}

	return localPath, nil
}

func (s *S3Storage) List(prefix string) ([]*s3.Object, error) {
	sess, err := s.createSession()
	if err != nil {
		return nil, err
	}

	resp, err := sess.ListObjectsV2(&s3.ListObjectsV2Input{
		Bucket: &s.Bucket,
		Prefix: &prefix,
	})

	if err != nil {
		return nil, err
	}

	return resp.Contents, nil
}

func (s *S3Storage) Upload(key string, file multipart.File) (string, error) {
	sess, err := s.createSession()
	if err != nil {
		return "", err
	}

	_, err = sess.PutObject(&s3.PutObjectInput{
		Bucket: &s.Bucket,
		Body:   file,
		Key:    &key,
	})

	if err != nil {
		return "", err
	}

	return key, err
}

func (s *S3Storage) Delete(key string) error {
	sess, err := s.createSession()
	if err != nil {
		return err
	}

	_, err = sess.DeleteObject(&s3.DeleteObjectInput{
		Bucket: &s.Bucket,
		Key:    &key,
	})

	return err
}
