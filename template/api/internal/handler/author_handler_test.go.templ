// This is an example test for sqlite3.
// Will need to be adjusted depending on the database you've selected.

package handler_test

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"log"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"

	"test/internal/data"
	"test/internal/handler"
	"test/static"

	"github.com/gin-gonic/gin"
	_ "github.com/mattn/go-sqlite3"
	"github.com/pressly/goose/v3"
)

var router *gin.Engine

func TestMain(m *testing.M) {
	db, err := sql.Open("sqlite3", "./author_handler_test.db")
	if err != nil {
		log.Fatalf("Error opening database: %v", err)
	}
	defer db.Close()

	goose.SetBaseFS(static.Migration)

	if err := goose.SetDialect("sqlite3"); err != nil {
		log.Fatal(err)
	}

	if err := goose.Up(db, "sql/migrations"); err != nil {
		log.Fatal(err)
	}

	h := handler.Init(db)
	router = gin.Default()
	router.GET("/authors/:id", h.GetAuthor)
	router.GET("/authors", h.ListAuthor)
	router.POST("/authors", h.CreateAuthor)
	router.PUT("/authors/:id", h.UpdateAuthor)
	router.DELETE("/authors/:id", h.DeleteAuthor)

	os.Exit(m.Run())
}

func TestGetAuthor(t *testing.T) {
	req, _ := http.NewRequest("GET", "/authors/1", nil)
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if w.Code != http.StatusOK {
		t.Fatalf("expected status %d but got %d", http.StatusOK, w.Code)
	}

	var response data.Author
	if err := json.Unmarshal(w.Body.Bytes(), &response); err != nil {
		t.Fatalf("unable to parse response: %v", err)
	}
}

func TestListAuthor(t *testing.T) {
	req, _ := http.NewRequest("GET", "/authors", nil)
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if w.Code != http.StatusOK {
		t.Fatalf("expected status %d but got %d", http.StatusOK, w.Code)
	}

	var response []data.Author
	if err := json.Unmarshal(w.Body.Bytes(), &response); err != nil {
		t.Fatalf("unable to parse response: %v", err)
	}
}

func TestCreateAuthor(t *testing.T) {
	newAuthor := handler.ValidAuthor{Name: "New Author", Bio: "New Author Bio"}
	jsonValue, _ := json.Marshal(newAuthor)

	req, _ := http.NewRequest("POST", "/authors", bytes.NewBuffer(jsonValue))
	req.Header.Set("Content-Type", "application/json")

	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if w.Code != http.StatusOK {
		t.Fatalf("expected status %d but got %d", http.StatusOK, w.Code)
	}

	var response data.Author
	if err := json.Unmarshal(w.Body.Bytes(), &response); err != nil {
		t.Fatalf("unable to parse response: %v", err)
	}

	if response.Name != "New Author" {
		t.Errorf("expected name %s but got %s", "New Author", response.Name)
	}
}

func TestUpdateAuthor(t *testing.T) {
	updatedAuthor := handler.ValidAuthor{Name: "Updated Author", Bio: "Updated Bio"}
	jsonValue, _ := json.Marshal(updatedAuthor)
	req, _ := http.NewRequest("PUT", "/authors/1", bytes.NewBuffer(jsonValue))
	req.Header.Set("Content-Type", "application/json")

	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if w.Code != http.StatusOK {
		t.Fatalf("expected status %d but got %d", http.StatusOK, w.Code)
	}

	var response data.Author
	if err := json.Unmarshal(w.Body.Bytes(), &response); err != nil {
		t.Fatalf("unable to parse response: %v", err)
	}

	if response.Name != "Updated Author" {
		t.Errorf("expected name %s but got %s", "Updated Author", response.Name)
	}
}

func TestDeleteAuthor(t *testing.T) {
	req, _ := http.NewRequest("DELETE", "/authors/1", nil)
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if w.Code != http.StatusNoContent {
		t.Fatalf("expected status %d but got %d", http.StatusNoContent, w.Code)
	}
}
