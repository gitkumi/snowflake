// This is an example CRUD endpoints for sqlite3.
// Will need to be adjusted depending on the database you've selected.

package handler

import (
	"database/sql"
	"net/http"
	"strconv"

	"{{ .Name}}/internal/data"
	"github.com/gin-gonic/gin"
)

type validAuthor struct {
	Name string `json:"name" binding:"required"`
	Bio  string `json:"bio" binding:"required"`
}

func (v validAuthor) createData() data.CreateAuthorParams {
	return data.CreateAuthorParams{
		Name: v.Name,
		Bio: sql.NullString{
			Valid:  true,
			String: v.Bio,
		},
	}
}

func (v validAuthor) updateData() data.UpdateAuthorParams {
	return data.UpdateAuthorParams{
		Name: v.Name,
		Bio: sql.NullString{
			Valid:  true,
			String: v.Bio,
		},
	}
}

func (h *Handler) GetAuthor(c *gin.Context) {
	q := data.New(h.db)

	authorId := c.Param("id")
	id, err := strconv.ParseInt(authorId, 10, 64)
	if err != nil {
		c.JSON(http.StatusUnprocessableEntity, gin.H{
			"error": err.Error(),
		})
		return
	}

	author, err := q.GetAuthor(c, id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, author)
}

func (h *Handler) ListAuthor(c *gin.Context) {
	q := data.New(h.db)

	authors, err := q.ListAuthors(c)

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, authors)
}

func (h *Handler) CreateAuthor(c *gin.Context) {
	q := data.New(h.db)

	var validated validAuthor
	if err := c.BindJSON(&validated); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}

	newAuthor := validated.createData()
	res, err := q.CreateAuthor(c, newAuthor)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, res)
}

func (h *Handler) UpdateAuthor(c *gin.Context) {
	q := data.New(h.db)

	authorId := c.Param("id")
	id, err := strconv.ParseInt(authorId, 10, 64)
	if err != nil {
		c.JSON(http.StatusUnprocessableEntity, gin.H{
			"error": err.Error(),
		})
		return
	}

	author, err := q.GetAuthor(c, id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	var validatedAuthor validAuthor
	if err := c.BindJSON(&validatedAuthor); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}

	updatedAuthor := validatedAuthor.updateData()
	updatedAuthor.ID = author.ID

	author, err = q.UpdateAuthor(c, updatedAuthor)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, author)
}

func (h *Handler) DeleteAuthor(c *gin.Context) {
	q := data.New(h.db)

	authorId := c.Param("id")
	id, err := strconv.ParseInt(authorId, 10, 64)
	if err != nil {
		c.JSON(http.StatusUnprocessableEntity, gin.H{
			"error": err.Error(),
		})
		return
	}

	err = q.DeleteAuthor(c, id)

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	c.Status(http.StatusNoContent)
}
