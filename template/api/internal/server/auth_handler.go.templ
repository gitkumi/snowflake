package server

import (
	"database/sql"
	"net/http"
	"{{ .Name }}/internal/data"
	"{{ .Name }}/internal/utils"
	"time"

	"github.com/alexedwards/argon2id"
	"github.com/gin-gonic/gin"
	gonanoid "github.com/matoous/go-nanoid/v2"
)

func (h *Server) Register(c *gin.Context) {
	var registerParams RegisterInput
	if err := c.BindJSON(&registerParams); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}

	data, err := registerParams.Data()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	res, err := h.Query.CreateUser(c, data)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	c.JSON(http.StatusCreated, gin.H{
		"data": res,
	})
}

func (h *Server) Login(c *gin.Context) {
	var login LoginInput
	if err := c.BindJSON(&login); err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error": err.Error(),
		})
		return
	}

	user, err := h.Query.GetUserByEmail(c, login.Email)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error": "Invalid username or password.",
		})
		return
	}

	if user == (data.User{}) {
		// Fake run
		_, _ = argon2id.ComparePasswordAndHash(login.Password, "notsecure")
		c.JSON(http.StatusNotFound, gin.H{
			"error": "Invalid username or password.",
		})
		return
	}

	match, err := argon2id.ComparePasswordAndHash(login.Password, user.HashedPassword.String)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error": "Invalid username or password.",
		})
		return
	}

	if !match {
		c.JSON(http.StatusNotFound, gin.H{
			"error": "Invalid username or password.",
		})
		return
	}

	tokenString, err := utils.CreateJwt(user.Email)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"token": tokenString,
	})
}

// TODO: Make it idempotic?
func (h *Server) CreateMagicLink(c *gin.Context) {
	var magicLink CreateMagicLinkInput
	if err := c.BindJSON(&magicLink); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}

	user, err := h.Query.GetUserByEmail(c, magicLink.Email)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}

	nanoid, err := gonanoid.New()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	_, err = h.Query.CreateAuthToken(c, data.CreateAuthTokenParams{
		ID:     nanoid,
		UserID: user.ID,
		Type:   "magic_link",
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	// TODO: Send the magic link to the email.
	c.JSON(http.StatusCreated, gin.H{
		"message": "Please check your email for the magic link.",
	})
}

func (h *Server) CreateResetPassword(c *gin.Context) {
	var createResetPasswordParams CreateResetPasswordInput
	if err := c.BindJSON(&createResetPasswordParams); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}

	user, err := h.Query.GetUserByEmail(c, createResetPasswordParams.Email)
	if err != nil || user == (data.User{}) {
		c.Status(http.StatusNoContent)
		return
	}

	nanoid, err := gonanoid.New()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}
	_, err = h.Query.CreateAuthToken(c, data.CreateAuthTokenParams{
		ID:     nanoid,
		Type:   "reset_password",
		UserID: user.ID,
	})

	// TODO: Send the reset password link to email.

	c.JSON(http.StatusOK, gin.H{
		"message": "Please check your email for the reset password link.",
	})
}

func (h *Server) CreateConfirmEmail(c *gin.Context) {
	var createConfirmEmailParams CreateConfirmEmailInput
	if err := c.BindJSON(&createConfirmEmailParams); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}

	user, err := h.Query.GetUserByEmail(c, createConfirmEmailParams.Email)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}

	nanoid, err := gonanoid.New()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}
	_, err = h.Query.CreateAuthToken(c, data.CreateAuthTokenParams{
		ID:     nanoid,
		UserID: user.ID,
		Type:   "confirm_email",
	})

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	// TODO: Send the confirmation link to the email.
	c.JSON(http.StatusOK, gin.H{
		"message": "Please check your email for the confirmation link.",
	})
}

func (h *Server) ConsumeMagicLink(c *gin.Context) {
	token, err := h.Query.GetUserAuthTokens(c, data.GetUserAuthTokensParams{
		ID:   c.Param("token"),
		Type: "magic_link",
	})

	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error": err.Error(),
		})
		return
	}

	tokenString, err := utils.CreateJwt(token.Email)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"token": tokenString,
	})
}

func (h *Server) ConsumeResetPassword(c *gin.Context) {
	token, err := h.Query.GetUserAuthTokens(c, data.GetUserAuthTokensParams{
		ID:   c.Param("token"),
		Type: "reset_password",
	})

	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error": err.Error(),
		})
		return
	}

	var resetPasswordParams ResetPasswordInput
	if err := c.BindJSON(&resetPasswordParams); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}

	user, err := h.Query.GetUser(c, token.UserID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	if resetPasswordParams.Email != user.Email {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Invalid token.",
		})
		return
	}

	hashed, err := argon2id.CreateHash(resetPasswordParams.Password, argon2id.DefaultParams)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	updated, err := h.Query.UpdateUser(c, data.UpdateUserParams{
		ID:       user.ID,
		Email:    user.Email,
		Username: user.Username,
		HashedPassword: sql.NullString{
			String: hashed,
			Valid:  true,
		},
		FirstName:   user.FirstName,
		LastName:    user.LastName,
		ConfirmedAt: user.ConfirmedAt,
	})

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, updated)
}

func (h *Server) ConsumeConfirmEmail(c *gin.Context) {
	token, err := h.Query.GetUserAuthTokens(c, data.GetUserAuthTokensParams{
		ID:   c.Param("token"),
		Type: "confirm_email",
	})

	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error": err.Error(),
		})
		return
	}

	user, err := h.Query.GetUser(c, token.UserID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	confirmed, err := h.Query.UpdateUser(c, data.UpdateUserParams{
		ID:             user.ID,
		Email:          user.Email,
		Username:       user.Username,
		HashedPassword: user.HashedPassword,
		FirstName:      user.FirstName,
		LastName:       user.LastName,
		ConfirmedAt: sql.NullTime{
			Time:  time.Now(),
			Valid: true,
		},
	})

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"data": createUserResponse(confirmed),
	})
}