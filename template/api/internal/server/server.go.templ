package server

import (
	"{{ .Name }}/internal/data"
	"{{ .Name }}/static"
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/pressly/goose/v3"
)

type Config struct {
	DatabaseUrl string
	Port        int
	MigrateDb   bool
	GinMode     string
	Storage     storage.Storage
}

type Server struct {
	Config  *Config
	Router  *gin.Engine
	DB      *sql.DB
	Query   *data.Queries
	Storage *storage.Storage
}

func Init(cfg *Config) (*Server, error) {
	db, err := sql.Open("sqlite3", cfg.DatabaseUrl)
	if err != nil {
		return nil, err
	}

	db.SetMaxOpenConns(25)
	db.SetMaxIdleConns(25)
	db.SetConnMaxLifetime(2 * time.Minute)

	if cfg.MigrateDb {
		goose.SetBaseFS(static.Migration)

		if err := goose.SetDialect("sqlite3"); err != nil {
			return nil, err
		}

		if err := goose.Up(db, "sql/migrations"); err != nil {
			return nil, err
		}
	}

	gin.SetMode(cfg.GinMode)

	s := &Server{
		Config:  cfg,
		DB:      db,
		Query:   data.New(db),
		Router:  gin.Default(),
		Storage: &cfg.Storage,
	}

	s.RegisterRoutes()

	return s, nil
}

func (s *Server) Run() error {
	srv := &http.Server{
		Addr:    ":" + strconv.Itoa(s.Config.Port),
		Handler: s.Router,
	}

	errCh := make(chan error, 1)

	go func() {
		if err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
			errCh <- fmt.Errorf("listen and serve returned err: %w", err)
		}
	}()

	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	select {
	case <-ctx.Done():

	case err := <-errCh:
		return err
	}

	shutdownCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := srv.Shutdown(shutdownCtx); err != nil {
		return err
	}

	return nil
}

func (s *Server) Health(c *gin.Context) {
	err := s.DB.Ping()

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "OK",
	})
}
