package server

import (
	"{{ .Name }}/internal/data"
	"{{ .Name }}/static"
	"database/sql"
	"net/http"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/pressly/goose/v3"
)

type Config struct {
	DatabaseUrl string
	Port        int
	MigrateDb   bool
	GinMode     string
}

type Server struct {
	Config *Config
	Router *gin.Engine
	DB     *sql.DB
	Query  *data.Queries
}

func Init(cfg *Config) (*Server, error) {
	db, err := sql.Open("sqlite3", cfg.DatabaseUrl)
	if err != nil {
		return nil, err
	}

	db.SetMaxOpenConns(25)
	db.SetMaxIdleConns(25)
	db.SetConnMaxLifetime(2 * time.Minute)

	if cfg.MigrateDb {
		goose.SetBaseFS(static.Migration)

		if err := goose.SetDialect("sqlite3"); err != nil {
			return nil, err
		}

		if err := goose.Up(db, "sql/migrations"); err != nil {
			return nil, err
		}
	}

	gin.SetMode(cfg.GinMode)

	s := &Server{
		Config: cfg,
		DB:     db,
		Query:  data.New(db),
		Router: gin.Default(),
	}

	s.RegisterRoutes()

	return s, nil
}

func (s *Server) Run() error {
	portStr := strconv.Itoa(s.Config.Port)
	return s.Router.Run("localhost:" + portStr)
}

func (s *Server) Health(c *gin.Context) {
	err := s.DB.Ping()

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "OK",
	})
}
