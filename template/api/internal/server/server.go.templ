package server

import (
	"context"
	"database/sql"
	"{{ .Name }}/internal/data"
	"{{ .Name }}/internal/smtp"
	"{{ .Name }}/internal/storage"
	"{{ .Name }}/static"
	"errors"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"sync"
	"syscall"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/pressly/goose/v3"
)

type Config struct {
	BaseURL string
	Port    int

	GinMode string

	DatabaseURL string
	MigrateDB   bool

	Storage storage.Storage
}

type Server struct {
	BaseURL string
	Port    int

	Router *gin.Engine

	DB    *sql.DB
	Query *data.Queries

	Storage *storage.Storage
	Mailer  *smtp.Mailer

	wg sync.WaitGroup
}

func Init(cfg *Config) (*Server, error) {
	db, err := sql.Open("sqlite3", cfg.DatabaseURL)
	if err != nil {
		return nil, err
	}

	db.SetMaxOpenConns(25)
	db.SetMaxIdleConns(25)
	db.SetConnMaxLifetime(2 * time.Minute)

	if cfg.MigrateDB {
		goose.SetBaseFS(static.Migration)

		if err := goose.SetDialect("sqlite3"); err != nil {
			return nil, err
		}

		if err := goose.Up(db, "sql/migrations"); err != nil {
			return nil, err
		}
	}

	gin.SetMode(cfg.GinMode)
	router := gin.Default()
	router.Use(cors.Default())

	mailerHost := os.Getenv("MAILER_HOST")
	mailerUsername := os.Getenv("MAILER_USERNAME")
	mailerPassword := os.Getenv("MAILER_PASSWORD")
	mailerFrom := os.Getenv("MAILER_FROM")
	mailerPort, err := strconv.Atoi(os.Getenv("MAILER_PORT"))
	if err != nil {
		return nil, err
	}

	mailer, err := smtp.NewMailer(
		mailerHost,
		mailerPort,
		mailerUsername,
		mailerPassword,
		mailerFrom,
	)
	if err != nil {
		return nil, err
	}

	s := &Server{
		BaseURL: cfg.BaseURL,
		Port:    cfg.Port,
		Storage: &cfg.Storage,
		DB:      db,
		Query:   data.New(db),
		Router:  router,
		Mailer:  mailer,
	}

	s.RegisterRoutes()

	return s, nil
}

func (s *Server) Run() {
	srv := &http.Server{
		Addr:    ":" + strconv.Itoa(s.Port),
		Handler: s.Router,
	}

	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	go func() {
		<-ctx.Done()

		shutdownCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		if err := srv.Shutdown(shutdownCtx); err != nil {
			log.Println("Server shutdown", err)
		}
	}()

	if err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
		log.Println("Listen and server error", err)
	}

	s.wg.Wait()
}

func (s *Server) Health(c *gin.Context) {
	err := s.DB.Ping()

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"db": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"db": "OK",
	})
}

func (s *Server) Task(fn func() error) {
	s.wg.Add(1)

	go func() {
		defer s.wg.Done()

		err := fn()
		if err != nil {
			log.Println("Task Error", err)
		}
	}()
}
