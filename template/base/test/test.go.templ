package test

import (
	"{{ .Name }}/internal/application"
	"{{ .Name }}/internal/env"
	"{{ .Name }}/internal/repo"
	"{{ .Name }}/internal/smtp"
	"{{ .Name }}/internal/storage"
	"log"

	_ "{{ .Database.Import }}"
)

type TestApplication struct {
	Application *application.Application
	Query       *repo.Queries
}

func Init() (*TestApplication, error) {
	env, err := env.New(".env.test")
	if err != nil {
		log.Fatal("failed to create env", err)
	}

	router := application.NewRouter(&application.RouterConfig{
		GinMode: env.GinMode,
	})

	db, err := application.NewDB(&application.DBConfig{
		DatabaseConnString: env.DatabaseConnString,
		MigrateDatabase:    env.MigrateDatabase,
	})
	if err != nil {
		log.Fatal("failed to create db", err)
	}

	mailer := smtp.NewMockMailer()

	storage := storage.NewMockStorage()

	app, err := application.New(&application.Config{
		BaseURL: env.BaseURL,
		Port:    env.Port,
		DB:      db,
		Router:  router,
		Storage: storage,
		Mailer:  mailer,
	})
	if err != nil {
		log.Fatal("failed to create application", err)
	}

	query := repo.New(db)

	return &TestApplication{
		Application: app,
		Query:       query,
	}, nil
}
