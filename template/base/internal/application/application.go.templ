package application

import (
	"{{ .Name }}/internal/application/handler"
	"{{ .Name }}/internal/application/service"
	"{{ .Name }}/internal/repo"
	{{- if .SMTP }}
	"{{ .Name }}/internal/smtp"
	{{- end }}
	{{- if .Storage }}
	"{{ .Name }}/internal/storage"
	{{- end }}
	"context"
	"database/sql"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os/signal"
	"strconv"
	"sync"
	"syscall"
	"time"

	"github.com/gin-gonic/gin"
)

type Handlers struct {
	auth   *handler.AuthHandler
	health *handler.HealthHandler
	{{- if eq .AppType "web"}}
	html   *handler.HTMLHandler
	{{- end }}
}

type Application struct {
	baseURL  string
	port     int
	wg       sync.WaitGroup
	handlers *Handlers

	Router  *gin.Engine
	DB      *sql.DB
	{{- if .SMTP }}
	Mailer  smtp.Mailer
	{{- end }}
	{{- if .Storage }}
	Storage storage.Storage
	{{- end }}
}

type Config struct {
	BaseURL string
	Port    int
	Router  *gin.Engine
	DB      *sql.DB
	{{- if .SMTP }}
	Mailer  smtp.Mailer
	{{- end }}
	{{- if .Storage }}
	Storage storage.Storage
	{{- end }}
}

func New(cfg *Config) (*Application, error) {
	query := repo.New(cfg.DB)

	{{- if .SMTP }}
	authService := service.NewAuthService(cfg.BaseURL, query, cfg.Mailer)
	{{- else }}
	authService := service.NewAuthService(cfg.BaseURL, query)
	{{- end }}
	authHandler := handler.NewAuthHandler(authService)

	{{- if .Storage }}
	healthService := service.NewHealthService(cfg.DB, cfg.Storage)
	{{- else }}
	healthService := service.NewHealthService(cfg.DB)
	{{- end }}
	healthHandler := handler.NewHealthHandler(healthService)

	{{- if eq .AppType "web"}}
	htmlHandler := handler.NewHTMLHandler()
	{{- end }}

	handlers := &Handlers{
		auth:   authHandler,
		health: healthHandler,
		{{- if eq .AppType "web"}}
		html:   htmlHandler,
		{{- end }}
	}

	s := &Application{
		baseURL:  cfg.BaseURL,
		Router:   cfg.Router,
		handlers: handlers,
		port:			cfg.Port,
	}

	s.registerRoutes()

	return s, nil
}

func (app *Application) Run() {
	srv := &http.Server{
		Addr:    ":" + strconv.Itoa(app.port),
		Handler: app.Router,
	}

	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	go func() {
		<-ctx.Done()

		shutdownCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		if err := srv.Shutdown(shutdownCtx); err != nil {
			log.Println("Server shutdown", err)
		}
	}()

	fmt.Printf("\nServer started at http://%s:%d", app.baseURL, app.port)
	if err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
		log.Println("Listen and server error", err)
	}

	app.wg.Wait()
}
