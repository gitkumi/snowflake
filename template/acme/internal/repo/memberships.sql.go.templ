// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: memberships.sql

package repo

import (
	"context"
)

const createMembership = `-- name: CreateMembership :one
INSERT INTO memberships (
  organization_id, user_id, role
) VALUES (
  ?, ?, ?
)
RETURNING id, organization_id, user_id, role, created_at, updated_at
`

type CreateMembershipParams struct {
	OrganizationID int64
	UserID         int64
	Role           string
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (Membership, error) {
	row := q.db.QueryRowContext(ctx, createMembership, arg.OrganizationID, arg.UserID, arg.Role)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMembership = `-- name: DeleteMembership :exec
DELETE FROM memberships
WHERE id = ?
`

func (q *Queries) DeleteMembership(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMembership, id)
	return err
}

const getMembership = `-- name: GetMembership :one
SELECT id, organization_id, user_id, role, created_at, updated_at FROM memberships
WHERE id = ? LIMIT 1
`

func (q *Queries) GetMembership(ctx context.Context, id int64) (Membership, error) {
	row := q.db.QueryRowContext(ctx, getMembership, id)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMemberships = `-- name: ListMemberships :many
SELECT id, organization_id, user_id, role, created_at, updated_at FROM memberships
WHERE user_id = ?
ORDER BY id
`

func (q *Queries) ListMemberships(ctx context.Context, userID int64) ([]Membership, error) {
	rows, err := q.db.QueryContext(ctx, listMemberships, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMembership = `-- name: UpdateMembership :one
UPDATE memberships
set organization_id  = ?,
user_id  = ?,
role = ?
WHERE id = ?
RETURNING id, organization_id, user_id, role, created_at, updated_at
`

type UpdateMembershipParams struct {
	OrganizationID int64
	UserID         int64
	Role           string
	ID             int64
}

func (q *Queries) UpdateMembership(ctx context.Context, arg UpdateMembershipParams) (Membership, error) {
	row := q.db.QueryRowContext(ctx, updateMembership,
		arg.OrganizationID,
		arg.UserID,
		arg.Role,
		arg.ID,
	)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
