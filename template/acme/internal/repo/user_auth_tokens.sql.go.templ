// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_auth_tokens.sql

package repo

import (
	"context"
)

const createUserAuthToken = `-- name: CreateUserAuthToken :one
INSERT INTO user_auth_tokens (
  id,
  user_id,
  type
) VALUES (
  ?, ?, ?
)
RETURNING id, user_id, type, created_at
`

type CreateUserAuthTokenParams struct {
	ID     string
	UserID int64
	Type   string
}

func (q *Queries) CreateUserAuthToken(ctx context.Context, arg CreateUserAuthTokenParams) (UserAuthToken, error) {
	row := q.db.QueryRowContext(ctx, createUserAuthToken, arg.ID, arg.UserID, arg.Type)
	var i UserAuthToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAuthTokens = `-- name: GetUserAuthTokens :one
SELECT 
  user_auth_tokens.id,
  user_auth_tokens.user_id,
  user_auth_tokens.type,
  users.email
FROM user_auth_tokens
JOIN users ON user_auth_tokens.user_id = users.id
WHERE user_auth_tokens.id = ?
  AND user_auth_tokens.type = ?
LIMIT 1
`

type GetUserAuthTokensParams struct {
	ID   string
	Type string
}

type GetUserAuthTokensRow struct {
	ID     string
	UserID int64
	Type   string
	Email  string
}

func (q *Queries) GetUserAuthTokens(ctx context.Context, arg GetUserAuthTokensParams) (GetUserAuthTokensRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAuthTokens, arg.ID, arg.Type)
	var i GetUserAuthTokensRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Email,
	)
	return i, err
}
