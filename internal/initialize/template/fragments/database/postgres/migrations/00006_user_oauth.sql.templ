-- +goose Up
-- +goose StatementBegin
-- Add provider_type to user_auth_tokens to support OAuth
CREATE TABLE user_oauth_accounts (
  id BIGSERIAL PRIMARY KEY,
  user_id BIGINT NOT NULL,
  provider TEXT NOT NULL CHECK(provider IN ('google', 'facebook', 'github', 'discord', 'linkedin', 'instagram')),
  provider_user_id TEXT NOT NULL,
  provider_email TEXT NOT NULL,
  access_token TEXT,
  refresh_token TEXT,
  token_expires_at TIMESTAMP,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(provider, provider_user_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE OR REPLACE FUNCTION update_user_oauth_accounts_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_user_oauth_accounts_updated_at
    BEFORE UPDATE ON user_oauth_accounts
    FOR EACH ROW
    EXECUTE FUNCTION update_user_oauth_accounts_updated_at();
-- +goose StatementEnd

-- +goose Down
-- +goose StatementBegin
-- Restore original constraint
ALTER TABLE user_auth_tokens 
DROP CONSTRAINT user_auth_tokens_type_check;

ALTER TABLE user_auth_tokens
ADD CONSTRAINT user_auth_tokens_type_check 
CHECK(type IN ('magic_link', 'reset_password', 'confirm_email'));

-- Drop the OAuth accounts table
DROP TABLE user_oauth_accounts;
DROP FUNCTION IF EXISTS update_user_oauth_accounts_updated_at();
-- +goose StatementEnd 