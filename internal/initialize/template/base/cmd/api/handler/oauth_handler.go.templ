package handler

import (
	{{- if eq .AppType "web"}}
	"{{ .Name }}/cmd/web/service"
	{{- else }}
	"{{ .Name }}/cmd/api/service"
	{{- end }}
	"net/http"

	"github.com/gin-gonic/gin"
)

type OAuthHandler struct {
	Service *service.OAuthService
}

func NewOAuthHandler(s *service.OAuthService) *OAuthHandler {
	return &OAuthHandler{Service: s}
}

// ListProviders returns a list of configured OAuth providers
func (h *OAuthHandler) ListProviders(c *gin.Context) {
	providers := h.Service.ListProviders()
	c.JSON(http.StatusOK, gin.H{
		"providers": providers,
	})
}

// Authorize initiates the OAuth flow for a specific provider
func (h *OAuthHandler) Authorize(c *gin.Context) {
	providerName := c.Param("provider")

	// Get the authorization URL for the provider
	authURL, state, err := h.Service.GetAuthURL(providerName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
		return
	}

	// Set state in a cookie for validation later
	c.SetCookie("oauth_state", state, 3600, "/", "", false, true)

	// Redirect to the provider's authorization page
	c.Redirect(http.StatusTemporaryRedirect, authURL)
}

// Callback handles the OAuth callback from the provider
func (h *OAuthHandler) Callback(c *gin.Context) {
	providerName := c.Param("provider")
	code := c.Query("code")
	state := c.Query("state")

	// Get state from cookie for validation
	cookieState, _ := c.Cookie("oauth_state")

	// Validate state
	if state == "" || state != cookieState {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "invalid state parameter",
		})
		return
	}

	// Exchange the code for a token
	token, err := h.Service.Exchange(c, providerName, code, state)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	// Get user info
	userInfo, err := h.Service.GetUserInfo(c, providerName, token)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
		return
	}

	// In a real application, you would:
	// 1. Check if the user exists in your database
	// 2. Create the user if they don't exist
	// 3. Generate a session or JWT token
	// 4. Redirect to your application with the token

	// For now, just return the user info
	c.JSON(http.StatusOK, gin.H{
		"user":  userInfo,
		"token": token,
	})
}
