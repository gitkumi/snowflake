package main

import (
	"log"
	"log/slog"
	"os"

	"{{ .Name }}/internal/application"
	"{{ .Name }}/internal/env"
	{{- if .SMTP }}
	"{{ .Name }}/internal/smtp"
	{{- end }}
	{{- if .Storage }}
	"{{ .Name }}/internal/storage"
	{{- end }}
	{{- if .WithOAuth }}
	"{{ .Name }}/internal/oauth"
	{{- end }}

	"github.com/lmittmann/tint"
	{{- if ne .Database.String "none" }}
	_ "{{.Database.Import}}"
	{{- end }}

	{{- if .Redis }}
	"github.com/redis/go-redis/v9"
	{{- end }}

	{{- if eq .BackgroundJob "sqs" }}
	"acme/internal/queue"
	{{- end }}
)

func main() {
	vars, err := env.Read(".env")
	if err != nil {
		log.Fatal("failed to read environment variables", err)
	}

	logger := slog.New(tint.NewHandler(os.Stdout, &tint.Options{Level: slog.LevelDebug}))

	router := application.NewRouter(&application.RouterConfig{
		GinMode: vars.GinMode,
	})

	{{- if ne .Database.String "none" }}
	db, err := application.NewDB(&application.DBConfig{
		DatabaseConnString: vars.DatabaseConnString,
		MigrateDatabase:    vars.MigrateDatabase,
	})
	if err != nil {
		log.Fatal("failed to create DB", err)
	}
	{{- end }}
	
	{{- if .SMTP }}
	mailer := smtp.NewMockMailer()
	// TODO: uncomment this after setting up your SMTP
	// mailer, err := smtp.NewSMTPMailer(&smtp.SMTPMailerConfig{
	// 	Host:     vars.SmtpHost,
	// 	Port:     vars.SmtpPort,
	// 	Username: vars.SmtpUsername,
	// 	Password: vars.SmtpPassword,
	// 	From:     vars.SmtpFrom,
	// })
	// if err != nil {
	// 	log.Fatal("failed to create mailer", err)
	// }
	{{- end }}

	{{- if .Storage }}
	storage := storage.NewMockStorage()
	// TODO: uncomment this after setting up your S3
	// storage := storage.NewS3Storage(&storage.S3StorageConfig{
	// 	AccessKey:   vars.S3AccessKey,
	// 	SecretKey:   vars.S3SecretKey,
	// 	EndpointURL: vars.S3EndpointURL,
	// 	Region:      vars.S3Region,
	// 	Bucket:      vars.S3Bucket,
	// })
	{{- end }}

	{{- if .Redis }}
	rdb := redis.NewClient(&redis.Options{
		Addr:     vars.RedisAddr,
		Password: vars.RedisPassword,
		DB:       vars.RedisDB,
	})
	{{- end }}
	{{- if eq .BackgroundJob "sqs" }}
	sqs := queue.NewMockQueue()
	// TODO: Uncomment this after setting up your SQS 
	// sqs := queue.NewSQSQueue(&queue.SQSQueueConfig{
	// 	AccessKey: vars.SQSAccessKey,
	// 	SecretKey: vars.SQSSecretKey,
	// 	Region:    vars.SQSRegion,
	// 	QueueURL:  vars.SQSQueueURL,
	// })
	{{- end }}

	{{- if .OAuthGoogle }}
	googleOAuth := oauth.NewMockGoogleOAuth()
	// TODO: Uncomment this after setting up your Google OAuth
	// googleOAuth := oauth.NewGoogleOAuth(
	// 	vars.GoogleClientID,
	// 	vars.GoogleClientSecret,
	// 	vars.BaseURL+"/api/auth/google/callback",
	// )
	{{- end }}

	{{- if .OAuthFacebook }}
	facebookOAuth := oauth.NewMockFacebookOAuth()
	// TODO: Uncomment this after setting up your Facebook OAuth
	// facebookOAuth := oauth.NewFacebookOAuth(
	// 	vars.FacebookClientID,
	// 	vars.FacebookClientSecret,
	// 	vars.BaseURL+"/api/auth/facebook/callback",
	// )
	{{- end }}

	{{- if .OAuthGitHub }}
	githubOAuth := oauth.NewMockGitHubOAuth()
	// TODO: Uncomment this after setting up your GitHub OAuth
	// githubOAuth := oauth.NewGitHubOAuth(
	// 	vars.GitHubClientID,
	// 	vars.GitHubClientSecret,
	// 	vars.BaseURL+"/api/auth/github/callback",
	// )
	{{- end }}

	{{- if .OAuthLinkedIn }}
	linkedInOAuth := oauth.NewMockLinkedInOAuth()
	// TODO: Uncomment this after setting up your LinkedIn OAuth
	// linkedInOAuth := oauth.NewLinkedInOAuth(
	// 	vars.LinkedInClientID,
	// 	vars.LinkedInClientSecret,
	// 	vars.BaseURL+"/api/auth/linkedin/callback",
	// )
	{{- end }}

	{{- if .OAuthInstagram }}
	instagramOAuth := oauth.NewMockInstagramOAuth()
	// TODO: Uncomment this after setting up your Instagram OAuth
	// instagramOAuth := oauth.NewInstagramOAuth(
	// 	vars.InstagramClientID,
	// 	vars.InstagramClientSecret,
	// 	vars.BaseURL+"/api/auth/instagram/callback",
	// )
	{{- end }}

	{{- if .OAuthDiscord }}
	discordOAuth := oauth.NewMockDiscordOAuth()
	// TODO: Uncomment this after setting up your Discord OAuth
	// discordOAuth := oauth.NewDiscordOAuth(
	// 	vars.DiscordClientID,
	// 	vars.DiscordClientSecret,
	// 	vars.BaseURL+"/api/auth/discord/callback",
	// )
	{{- end }}

	app, err := application.New(&application.Config{
		Environment: vars.Environment,
		BaseURL: vars.BaseURL,
		Port:    vars.Port,
		{{- if ne .Database.String "none" }}
		DB:      db,
		{{- end }}
		Router:  router,
		{{- if .SMTP }}
		Mailer:  mailer,
		{{- end }}
		{{- if .Storage }}
		Storage: storage,
		{{- end }}
		{{- if .Redis }}
		Redis: rdb,
		{{- end }}
		Logger:      logger,
		{{- if eq .BackgroundJob "sqs" }}
		Queue:       sqs,
		{{- end }}
		{{- if .OAuthGoogle }}GoogleOAuth:    googleOAuth,{{- end }}
		{{- if .OAuthFacebook }}FacebookOAuth:  facebookOAuth,{{- end }}
		{{- if .OAuthGitHub }}GitHubOAuth:    githubOAuth,{{- end }}
		{{- if .OAuthLinkedIn }}LinkedInOAuth:  linkedInOAuth,{{- end }}
		{{- if .OAuthInstagram }}InstagramOAuth: instagramOAuth,{{- end }}
		{{- if .OAuthDiscord }}DiscordOAuth:   discordOAuth,{{- end }}
	})
	if err != nil {
		log.Fatal("failed to create application", err)
	}

	app.Run()
}
