package main

import (
	"log"
	"log/slog"
	"os"

	"{{ .Name }}/internal/application"
	"{{ .Name }}/internal/env"
	{{- if .SMTP }}
	"{{ .Name }}/internal/smtp"
	{{- end }}
	{{- if .Storage }}
	"{{ .Name }}/internal/storage"
	{{- end }}

	"github.com/lmittmann/tint"
	{{- if ne .Database.String "none" }}
	_ "{{.Database.Import}}"
	{{- end }}
)

func main() {
	vars, err := env.Read(".env")
	if err != nil {
		log.Fatal("failed to read environment variables", err)
	}

	router := application.NewRouter(&application.RouterConfig{
		GinMode: vars.GinMode,
	})

	{{- if ne .Database.String "none" }}
	db, err := application.NewDB(&application.DBConfig{
		DatabaseConnString: vars.DatabaseConnString,
		MigrateDatabase:    vars.MigrateDatabase,
	})
	if err != nil {
		log.Fatal("failed to create DB", err)
	}
	{{- end }}
	
	{{- if .SMTP }}
	mailer := smtp.NewMockMailer()
	// TODO: uncomment this after setting up your SMTP server
	// mailer, err := smtp.NewSMTPMailer(&smtp.SMTPMailerConfig{
	// 	Host:     vars.SmtpHost,
	// 	Port:     vars.SmtpPort,
	// 	Username: vars.SmtpUsername,
	// 	Password: vars.SmtpPassword,
	// 	From:     vars.SmtpFrom,
	// })
	// if err != nil {
	// 	log.Fatal("failed to create mailer", err)
	// }
	{{- end }}

	{{- if .Storage }}
	storage := storage.NewS3Storage(&storage.S3StorageConfig{
		AccessKey:   vars.S3AccessKey,
		SecretKey:   vars.S3SecretKey,
		EndpointURL: vars.S3EndpointURL,
		Region:      vars.S3Region,
		Bucket:      vars.S3Bucket,
	})
	{{- end }}

	logger := slog.New(tint.NewHandler(os.Stdout, &tint.Options{Level: slog.LevelDebug}))

	app, err := application.New(&application.Config{
		Environment: vars.Environment,
		BaseURL: vars.BaseURL,
		Port:    vars.Port,
		{{- if ne .Database.String "none" }}
		DB:      db,
		{{- end }}
		Router:  router,
		{{- if .SMTP }}
		Mailer:  mailer,
		{{- end }}
		{{- if .Storage }}
		Storage: storage,
		{{- end }}
		Logger:      logger,
	})
	if err != nil {
		log.Fatal("failed to create application", err)
	}

	app.Run()
}
