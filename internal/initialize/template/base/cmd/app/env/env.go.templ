package env

import (
	internalenv "{{ .Name }}/internal/env"
	"fmt"
)

type EnvironmentVariables struct {
	Environment             internalenv.Environment
	BaseURL                 string
	Port                    int
	GinMode                 string
	{{- if ne .Database.String "none" }}
	DatabaseConnString      string
	MigrateDatabase         bool
	{{- end }}
	{{- if .SMTP }}
	SmtpHost                string
	SmtpPort                int
	SmtpUsername            string
	SmtpPassword            string
	SmtpFrom                string
	{{- end }}
	{{- if .Storage }}
	S3AccessKey             string
	S3SecretKey             string
	S3EndpointURL           string
	S3Region                string
	S3Bucket                string
	{{- end }}
	{{- if .Redis }}
	RedisAddr               string
	RedisPassword           string
	RedisDB                 int
	{{- end }}
	{{- if eq .Queue "sqs" }}
	SQSAccessKey            string
	SQSSecretKey            string
	SQSRegion               string
	SQSQueueURL             string
	{{- end }}
	{{- if eq .Billing.String "stripe" }}
	StripeSecretKey     string
	StripeWebhookSecret string
	{{- end }}
}

func Load(fileName string) (*EnvironmentVariables, error) {
	if err := internalenv.Load(fileName); err != nil {
		return nil, err
	}

	environmentStr := internalenv.GetEnvWithDefault("ENVIRONMENT", "")
	appEnv := internalenv.Environment(environmentStr)
	if !appEnv.IsValid() {
		return nil, fmt.Errorf("invalid environment: '%s'", environmentStr)
	}

	vars := &EnvironmentVariables{
		Environment: appEnv,
		BaseURL:     internalenv.GetEnvWithDefault("BASE_URL", "development"),
		Port:        internalenv.GetIntEnvWithDefault("PORT", 8080),
		GinMode:     internalenv.GetEnvWithDefault("GIN_MODE", "debug"),
		{{- if ne .Database.String "none" }}
		DatabaseConnString: internalenv.GetEnvWithDefault("DATABASE_CONN_STRING", ""),
		MigrateDatabase:    internalenv.GetBoolEnvWithDefault("MIGRATE_DATABASE", true),
		{{- end }}
		{{- if .SMTP }}
		SmtpHost:     internalenv.GetEnvWithDefault("SMTP_HOST", ""),
		SmtpPort:     internalenv.GetIntEnvWithDefault("SMTP_PORT", 0),
		SmtpUsername: internalenv.GetEnvWithDefault("SMTP_USERNAME", ""),
		SmtpPassword: internalenv.GetEnvWithDefault("SMTP_PASSWORD", ""),
		SmtpFrom:     internalenv.GetEnvWithDefault("SMTP_FROM", ""),
		{{- end }}
		{{- if .Storage }}
		S3AccessKey:   internalenv.GetEnvWithDefault("S3_ACCESS_KEY", ""),
		S3SecretKey:   internalenv.GetEnvWithDefault("S3_SECRET_KEY", ""),
		S3EndpointURL: internalenv.GetEnvWithDefault("S3_ENDPOINT_URL", ""),
		S3Region:      internalenv.GetEnvWithDefault("S3_REGION", ""),
		S3Bucket:      internalenv.GetEnvWithDefault("S3_BUCKET", ""),
		{{- end }}
		{{- if .Redis }}
		RedisAddr:     internalenv.GetEnvWithDefault("REDIS_ADDR", ""),
		RedisPassword: internalenv.GetEnvWithDefault("REDIS_PASSWORD", ""),
		RedisDB:       internalenv.GetIntEnvWithDefault("REDIS_DB", 6379),
		{{- end }}
		{{- if eq .Queue "sqs" }}
		SQSAccessKey: internalenv.GetEnvWithDefault("SQS_ACCESS_KEY", ""),
		SQSSecretKey: internalenv.GetEnvWithDefault("SQS_SECRET_KEY", ""),
		SQSRegion:    internalenv.GetEnvWithDefault("SQS_REGION", ""),
		SQSQueueURL:  internalenv.GetEnvWithDefault("SQS_QUEUE_URL", ""),
		{{- end }}
		{{- if eq .Billing.String "stripe" }}
		StripeSecretKey:     internalenv.GetEnvWithDefault("STRIPE_SECRET_KEY", ""),
		StripeWebhookSecret: internalenv.GetEnvWithDefault("STRIPE_WEBHOOK_SECRET", ""),
		{{- end }}
	}

	return vars, nil
}

