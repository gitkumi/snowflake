package env

import (
	internalenv "{{ .Name }}/internal/env"
	"fmt"
	{{- if .HasOAuth }}
	"strings"
	{{- end }}
)

type EnvironmentVariables struct {
	Environment             internalenv.Environment
	BaseURL                 string
	Port                    int
	GinMode                 string
	{{- if .HasOAuth }}
	OAuthAllowedRedirectURLs []string
	SessionSecret           string
	SessionMaxAge           int
	{{- end }}
	{{- if ne .Database.String "none" }}
	DatabaseConnString      string
	MigrateDatabase         bool
	{{- end }}
	{{- if .SMTP }}
	SmtpHost                string
	SmtpPort                int
	SmtpUsername            string
	SmtpPassword            string
	SmtpFrom                string
	{{- end }}
	{{- if .Storage }}
	S3AccessKey             string
	S3SecretKey             string
	S3EndpointURL           string
	S3Region                string
	S3Bucket                string
	{{- end }}
	{{- if .Redis }}
	RedisAddr               string
	RedisPassword           string
	RedisDB                 int
	{{- end }}
	{{- if eq .Queue "sqs" }}
	SQSAccessKey            string
	SQSSecretKey            string
	SQSRegion               string
	SQSQueueURL             string
	{{- end }}
	{{- if .OAuthGoogle }}
	OAuthGoogleClientID     string
	OAuthGoogleClientSecret string
	OAuthGoogleRedirectURL  string
	{{- end }}
	{{- if .OAuthGitHub }}
	OAuthGitHubClientID     string
	OAuthGitHubClientSecret string
	OAuthGitHubRedirectURL  string
	{{- end }}
	{{- if .OAuthFacebook }}
	OAuthFacebookClientID     string
	OAuthFacebookClientSecret string
	OAuthFacebookRedirectURL  string
	{{- end }}
	{{- if .OAuthInstagram }}
	OAuthInstagramClientID     string
	OAuthInstagramClientSecret string
	OAuthInstagramRedirectURL  string
	{{- end }}
	{{- if .OAuthDiscord }}
	OAuthDiscordClientID     string
	OAuthDiscordClientSecret string
	OAuthDiscordRedirectURL  string
	{{- end }}
	{{- if .OAuthLinkedIn }}
	OAuthLinkedInClientID     string
	OAuthLinkedInClientSecret string
	OAuthLinkedInRedirectURL  string
	{{- end }}
	{{- if .OAuthReddit }}
	OAuthRedditClientID     string
	OAuthRedditClientSecret string
	OAuthRedditRedirectURL  string
	{{- end }}
	{{- if .OAuthTwitch }}
	OAuthTwitchClientID     string
	OAuthTwitchClientSecret string
	OAuthTwitchRedirectURL  string
	{{- end }}
	{{- if .OAuthStripe }}
	OAuthStripeClientID     string
	OAuthStripeClientSecret string
	OAuthStripeRedirectURL  string
	{{- end }}
	{{- if .OAuthX }}
	OAuthXClientID     string
	OAuthXClientSecret string
	OAuthXRedirectURL  string
	{{- end }}
	{{- if .OAuthMicrosoft }}
	OAuthMicrosoftClientID     string
	OAuthMicrosoftClientSecret string
	OAuthMicrosoftRedirectURL  string
	{{- end }}
	{{- if .OAuthSlack }}
	OAuthSlackClientID     string
	OAuthSlackClientSecret string
	OAuthSlackRedirectURL  string
	{{- end }}
	{{- if .OAuthSpotify }}
	OAuthSpotifyClientID     string
	OAuthSpotifyClientSecret string
	OAuthSpotifyRedirectURL  string
	{{- end }}
	{{- if .OIDCGoogle }}
	OIDCGoogleRedirectURL string
	{{- end }}
	{{- if .OIDCMicrosoft }}
	OIDCMicrosoftRedirectURL string
	{{- end }}
	{{- if .OIDCFacebook }}
	OIDCFacebookRedirectURL string
	{{- end }}
	{{- if .OIDCLinkedIn }}
	OIDCLinkedInRedirectURL string
	{{- end }}
	{{- if .OIDCDiscord }}
	OIDCDiscordRedirectURL string
	{{- end }}
	{{- if .OIDCTwitch }}
	OIDCTwitchRedirectURL string
	{{- end }}
	{{- if eq .Billing.String "stripe" }}
	StripeSecretKey     string
	StripeWebhookSecret string
	{{- end }}
}

func Load(fileName string) (*EnvironmentVariables, error) {
	if err := internalenv.Load(fileName); err != nil {
		return nil, err
	}

	environmentStr := internalenv.GetEnvWithDefault("ENVIRONMENT", "")
	appEnv := internalenv.Environment(environmentStr)
	if !appEnv.IsValid() {
		return nil, fmt.Errorf("invalid environment: '%s'", environmentStr)
	}

	{{- if .HasOAuth }}
	allowedRedirectURLsStr := internalenv.GetEnvWithDefault("OAUTH_ALLOWED_REDIRECT_URLS", "")
	var allowedRedirectURLs []string
	if allowedRedirectURLsStr != "" {
		allowedRedirectURLs = strings.Split(allowedRedirectURLsStr, ",")
		for i, url := range allowedRedirectURLs {
			allowedRedirectURLs[i] = strings.TrimSpace(url)
		}
	}
	{{- end }}

	vars := &EnvironmentVariables{
		Environment: appEnv,
		BaseURL:     internalenv.GetEnvWithDefault("BASE_URL", "development"),
		Port:        internalenv.GetIntEnvWithDefault("PORT", 8080),
		GinMode:     internalenv.GetEnvWithDefault("GIN_MODE", "debug"),
		{{- if .HasOAuth }}
		OAuthAllowedRedirectURLs: allowedRedirectURLs,
		SessionSecret:           internalenv.GetEnvWithDefault("SESSION_SECRET", ""),
		SessionMaxAge:           internalenv.GetIntEnvWithDefault("SESSION_MAX_AGE", 3600),
		{{- end }}
		{{- if ne .Database.String "none" }}
		DatabaseConnString: internalenv.GetEnvWithDefault("DATABASE_CONN_STRING", ""),
		MigrateDatabase:    internalenv.GetBoolEnvWithDefault("MIGRATE_DATABASE", true),
		{{- end }}
		{{- if .SMTP }}
		SmtpHost:     internalenv.GetEnvWithDefault("SMTP_HOST", ""),
		SmtpPort:     internalenv.GetIntEnvWithDefault("SMTP_PORT", 0),
		SmtpUsername: internalenv.GetEnvWithDefault("SMTP_USERNAME", ""),
		SmtpPassword: internalenv.GetEnvWithDefault("SMTP_PASSWORD", ""),
		SmtpFrom:     internalenv.GetEnvWithDefault("SMTP_FROM", ""),
		{{- end }}
		{{- if .Storage }}
		S3AccessKey:   internalenv.GetEnvWithDefault("S3_ACCESS_KEY", ""),
		S3SecretKey:   internalenv.GetEnvWithDefault("S3_SECRET_KEY", ""),
		S3EndpointURL: internalenv.GetEnvWithDefault("S3_ENDPOINT_URL", ""),
		S3Region:      internalenv.GetEnvWithDefault("S3_REGION", ""),
		S3Bucket:      internalenv.GetEnvWithDefault("S3_BUCKET", ""),
		{{- end }}
		{{- if .Redis }}
		RedisAddr:     internalenv.GetEnvWithDefault("REDIS_ADDR", ""),
		RedisPassword: internalenv.GetEnvWithDefault("REDIS_PASSWORD", ""),
		RedisDB:       internalenv.GetIntEnvWithDefault("REDIS_DB", 6379),
		{{- end }}
		{{- if eq .Queue "sqs" }}
		SQSAccessKey: internalenv.GetEnvWithDefault("SQS_ACCESS_KEY", ""),
		SQSSecretKey: internalenv.GetEnvWithDefault("SQS_SECRET_KEY", ""),
		SQSRegion:    internalenv.GetEnvWithDefault("SQS_REGION", ""),
		SQSQueueURL:  internalenv.GetEnvWithDefault("SQS_QUEUE_URL", ""),
		{{- end }}
		{{- if .OAuthGoogle }}
		OAuthGoogleClientID:     internalenv.GetEnvWithDefault("OAUTH_GOOGLE_CLIENT_ID", ""),
		OAuthGoogleClientSecret: internalenv.GetEnvWithDefault("OAUTH_GOOGLE_CLIENT_SECRET", ""),
		OAuthGoogleRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_GOOGLE_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthGitHub }}
		OAuthGitHubClientID:     internalenv.GetEnvWithDefault("OAUTH_GITHUB_CLIENT_ID", ""),
		OAuthGitHubClientSecret: internalenv.GetEnvWithDefault("OAUTH_GITHUB_CLIENT_SECRET", ""),
		OAuthGitHubRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_GITHUB_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthFacebook }}
		OAuthFacebookClientID:     internalenv.GetEnvWithDefault("OAUTH_FACEBOOK_CLIENT_ID", ""),
		OAuthFacebookClientSecret: internalenv.GetEnvWithDefault("OAUTH_FACEBOOK_CLIENT_SECRET", ""),
		OAuthFacebookRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_FACEBOOK_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthInstagram }}
		OAuthInstagramClientID:     internalenv.GetEnvWithDefault("OAUTH_INSTAGRAM_CLIENT_ID", ""),
		OAuthInstagramClientSecret: internalenv.GetEnvWithDefault("OAUTH_INSTAGRAM_CLIENT_SECRET", ""),
		OAuthInstagramRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_INSTAGRAM_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthDiscord }}
		OAuthDiscordClientID:     internalenv.GetEnvWithDefault("OAUTH_DISCORD_CLIENT_ID", ""),
		OAuthDiscordClientSecret: internalenv.GetEnvWithDefault("OAUTH_DISCORD_CLIENT_SECRET", ""),
		OAuthDiscordRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_DISCORD_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthLinkedIn }}
		OAuthLinkedInClientID:     internalenv.GetEnvWithDefault("OAUTH_LINKEDIN_CLIENT_ID", ""),
		OAuthLinkedInClientSecret: internalenv.GetEnvWithDefault("OAUTH_LINKEDIN_CLIENT_SECRET", ""),
		OAuthLinkedInRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_LINKEDIN_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthReddit }}
		OAuthRedditClientID:     internalenv.GetEnvWithDefault("OAUTH_REDDIT_CLIENT_ID", ""),
		OAuthRedditClientSecret: internalenv.GetEnvWithDefault("OAUTH_REDDIT_CLIENT_SECRET", ""),
		OAuthRedditRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_REDDIT_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthTwitch }}
		OAuthTwitchClientID:     internalenv.GetEnvWithDefault("OAUTH_TWITCH_CLIENT_ID", ""),
		OAuthTwitchClientSecret: internalenv.GetEnvWithDefault("OAUTH_TWITCH_CLIENT_SECRET", ""),
		OAuthTwitchRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_TWITCH_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthStripe }}
		OAuthStripeClientID:     internalenv.GetEnvWithDefault("OAUTH_STRIPE_CLIENT_ID", ""),
		OAuthStripeClientSecret: internalenv.GetEnvWithDefault("OAUTH_STRIPE_CLIENT_SECRET", ""),
		OAuthStripeRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_STRIPE_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthX }}
		OAuthXClientID:     internalenv.GetEnvWithDefault("OAUTH_X_CLIENT_ID", ""),
		OAuthXClientSecret: internalenv.GetEnvWithDefault("OAUTH_X_CLIENT_SECRET", ""),
		OAuthXRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_X_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthMicrosoft }}
		OAuthMicrosoftClientID:     internalenv.GetEnvWithDefault("OAUTH_MICROSOFT_CLIENT_ID", ""),
		OAuthMicrosoftClientSecret: internalenv.GetEnvWithDefault("OAUTH_MICROSOFT_CLIENT_SECRET", ""),
		OAuthMicrosoftRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_MICROSOFT_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthSlack }}
		OAuthSlackClientID:     internalenv.GetEnvWithDefault("OAUTH_SLACK_CLIENT_ID", ""),
		OAuthSlackClientSecret: internalenv.GetEnvWithDefault("OAUTH_SLACK_CLIENT_SECRET", ""),
		OAuthSlackRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_SLACK_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OAuthSpotify }}
		OAuthSpotifyClientID:     internalenv.GetEnvWithDefault("OAUTH_SPOTIFY_CLIENT_ID", ""),
		OAuthSpotifyClientSecret: internalenv.GetEnvWithDefault("OAUTH_SPOTIFY_CLIENT_SECRET", ""),
		OAuthSpotifyRedirectURL:  internalenv.GetEnvWithDefault("OAUTH_SPOTIFY_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OIDCGoogle }}
		OIDCGoogleRedirectURL: internalenv.GetEnvWithDefault("OIDC_GOOGLE_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OIDCMicrosoft }}
		OIDCMicrosoftRedirectURL: internalenv.GetEnvWithDefault("OIDC_MICROSOFT_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OIDCFacebook }}
		OIDCFacebookRedirectURL: internalenv.GetEnvWithDefault("OIDC_FACEBOOK_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OIDCLinkedIn }}
		OIDCLinkedInRedirectURL: internalenv.GetEnvWithDefault("OIDC_LINKEDIN_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OIDCDiscord }}
		OIDCDiscordRedirectURL: internalenv.GetEnvWithDefault("OIDC_DISCORD_REDIRECT_URL", ""),
		{{- end }}
		{{- if .OIDCTwitch }}
		OIDCTwitchRedirectURL: internalenv.GetEnvWithDefault("OIDC_TWITCH_REDIRECT_URL", ""),
		{{- end }}
		{{- if eq .Billing.String "stripe" }}
		StripeSecretKey:     internalenv.GetEnvWithDefault("STRIPE_SECRET_KEY", ""),
		StripeWebhookSecret: internalenv.GetEnvWithDefault("STRIPE_WEBHOOK_SECRET", ""),
		{{- end }}
	}

	return vars, nil
}

