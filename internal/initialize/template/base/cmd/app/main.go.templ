package main

import (
	"log"
	"log/slog"
	"os"

	"{{ .Name }}/cmd/app/application"
	"{{ .Name }}/cmd/app/env"
	"github.com/lmittmann/tint"
{{- if .HasOAuth }}
	"{{ .Name }}/internal/auth"
{{- end }}
{{- if ne .Database.String "none" }}
	_ "{{.Database.Import}}"
{{- end }}
{{- if .SMTP }}
	"{{ .Name }}/internal/smtp"
{{- end }}
{{- if .Storage }}
	"{{ .Name }}/internal/storage"
{{- end }}
{{- if .Redis }}
	"github.com/redis/go-redis/v9"
{{- end }}
{{- if eq .Queue "sqs" }}
	"{{ .Name }}/internal/queue"
{{- end }}
{{- if or .HasOAuth .HasOIDC }}
	"{{ .Name }}/internal/auth/oauth"
{{- end }}
{{- if .HasOIDC }}
	"{{ .Name }}/internal/auth/oidc"
{{- end }}
{{- if or .HasOAuth .HasOIDC }}
	"golang.org/x/oauth2"
{{- end }}
{{- if eq .Billing.String "stripe" }}
	"{{ .Name }}/internal/billing"
{{- end }}
)

func main() {
	vars, err := env.Load(".env")
	if err != nil {
		log.Fatal("failed to read environment variables", err)
	}

	router := application.NewRouter(&application.RouterConfig{
		GinMode: vars.GinMode,
	})

{{- if ne .Database.String "none" }}
	db, err := application.NewDB(&application.DBConfig{
		DatabaseConnString: vars.DatabaseConnString,
		MigrateDatabase:    vars.MigrateDatabase,
	})
	if err != nil {
		log.Fatal("failed to create DB", err)
	}
	{{- end }}
	
	{{- if .SMTP }}
	mailer := smtp.NewMockMailer()
	// TODO: uncomment this after setting up your SMTP
	// mailer, err := smtp.NewSMTPMailer(&smtp.SMTPMailerConfig{
	// 	Host:     vars.SmtpHost,
	// 	Port:     vars.SmtpPort,
	// 	Username: vars.SmtpUsername,
	// 	Password: vars.SmtpPassword,
	// 	From:     vars.SmtpFrom,
	// })
	// if err != nil {
	// 	log.Fatal("failed to create mailer", err)
	// }
	{{- end }}

	{{- if .Storage }}
	storage := storage.NewMockStorage()
	// TODO: uncomment this after setting up your S3
	// storage := storage.NewS3Storage(&storage.S3StorageConfig{
	// 	AccessKey:   vars.S3AccessKey,
	// 	SecretKey:   vars.S3SecretKey,
	// 	EndpointURL: vars.S3EndpointURL,
	// 	Region:      vars.S3Region,
	// 	Bucket:      vars.S3Bucket,
	// })
	{{- end }}

	{{- if .Redis }}
	rdb := redis.NewClient(&redis.Options{
		Addr:     vars.RedisAddr,
		Password: vars.RedisPassword,
		DB:       vars.RedisDB,
	})
	{{- end }}
{{- if eq .Queue "sqs" }}
	sqs := queue.NewMockQueue()
	// TODO: Uncomment this after setting up your SQS 
	// sqs := queue.NewSQSQueue(&queue.SQSQueueConfig{
	// 	AccessKey: vars.SQSAccessKey,
	// 	SecretKey: vars.SQSSecretKey,
	// 	Region:    vars.SQSRegion,
	// 	QueueURL:  vars.SQSQueueURL,
	// })
{{- end }}

{{- if .HasOAuth }}
	jwtManager, err := auth.NewJWTManager(vars.SessionSecret)
	if err != nil {
		log.Fatal("failed to create JWT manager", err)
	}
{{- end }}

	{{- if eq .Billing.String "stripe" }}
	// Use test keys during development, switch to live keys in production
	stripeBilling := billing.NewStripeBilling(&billing.StripeBillingConfig{
		SecretKey: vars.StripeSecretKey,
	})
	{{- end }}

	app, err := application.NewApplication(&application.Config{
		Environment: vars.Environment,
		BaseURL: vars.BaseURL,
		Port:    vars.Port,
		{{- if ne .Database.String "none" }}
		DB:      db,
		{{- end }}
		Router:  router,
		{{- if .SMTP }}
		Mailer:  mailer,
		{{- end }}
		{{- if .Storage }}
		Storage: storage,
		{{- end }}
		{{- if .Redis }}
		Redis: rdb,
		{{- end }}
		Logger:      slog.New(tint.NewHandler(os.Stdout, &tint.Options{Level: slog.LevelDebug})),
		{{- if eq .Queue "sqs" }}
		Queue:       sqs,
		{{- end }}

		{{- if .HasOAuth }}
		OAuth:                    newOAuthRegistry(vars),
		OAuthAllowedRedirectURLs: vars.OAuthAllowedRedirectURLs,
		JWTManager:               jwtManager,
		SessionMaxAge:            vars.SessionMaxAge,
		{{- end }}

		{{- if .HasOIDC }}
		OIDC:                     newOIDCRegistry(vars),
		{{- end }}

		{{- if eq .Billing.String "stripe" }}
		Billing: stripeBilling,
		StripeWebhookSecret: vars.StripeWebhookSecret,
		{{- end }}
	})
	if err != nil {
		log.Fatal("failed to create application", err)
	}

	app.Run()
}


{{- if .HasOAuth }}
func newOAuthRegistry(vars *env.EnvironmentVariables) *oauth.Registry {
	providers := make(map[string]*oauth.Provider)

	{{- if .OAuthGoogle }}
	providers["google"] = oauth.NewGoogleProvider(&oauth2.Config{
		ClientID:     vars.OAuthGoogleClientID,
		ClientSecret: vars.OAuthGoogleClientSecret,
		RedirectURL:  vars.OAuthGoogleRedirectURL,
		Scopes:       []string{"https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/userinfo.email"},
	})
	{{- end }}

	{{- if .OAuthGitHub }}
	providers["github"] = oauth.NewGitHubProvider(&oauth2.Config{
		ClientID:     vars.OAuthGitHubClientID,
		ClientSecret: vars.OAuthGitHubClientSecret,
		RedirectURL:  vars.OAuthGitHubRedirectURL,
		Scopes:       []string{"user:email"},
	})
	{{- end }}

	{{- if .OAuthFacebook }}
	providers["facebook"] = oauth.NewFacebookProvider(&oauth2.Config{
		ClientID:     vars.OAuthFacebookClientID,
		ClientSecret: vars.OAuthFacebookClientSecret,
		RedirectURL:  vars.OAuthFacebookRedirectURL,
		Scopes:       []string{"email"},
	})
	{{- end }}

	{{- if .OAuthInstagram }}
	providers["instagram"] = oauth.NewInstagramProvider(&oauth2.Config{
		ClientID:     vars.OAuthInstagramClientID,
		ClientSecret: vars.OAuthInstagramClientSecret,
		RedirectURL:  vars.OAuthInstagramRedirectURL,
		Scopes:       []string{"user_profile"},
	})
	{{- end }}

	{{- if .OAuthDiscord }}
	providers["discord"] = oauth.NewDiscordProvider(&oauth2.Config{
		ClientID:     vars.OAuthDiscordClientID,
		ClientSecret: vars.OAuthDiscordClientSecret,
		RedirectURL:  vars.OAuthDiscordRedirectURL,
		Scopes:       []string{"identify", "email"},
	})
	{{- end }}

	{{- if .OAuthLinkedIn }}
	providers["linkedin"] = oauth.NewLinkedInProvider(&oauth2.Config{
		ClientID:     vars.OAuthLinkedInClientID,
		ClientSecret: vars.OAuthLinkedInClientSecret,
		RedirectURL:  vars.OAuthLinkedInRedirectURL,
		Scopes:       []string{"r_liteprofile", "r_emailaddress"},
	})
	{{- end }}

	{{- if .OAuthReddit }}
	providers["reddit"] = oauth.NewRedditProvider(&oauth2.Config{
		ClientID:     vars.OAuthRedditClientID,
		ClientSecret: vars.OAuthRedditClientSecret,
		RedirectURL:  vars.OAuthRedditRedirectURL,
		Scopes:       []string{"identity"},
	})
	{{- end }}

	{{- if .OAuthTwitch }}
	providers["twitch"] = oauth.NewTwitchProvider(&oauth2.Config{
		ClientID:     vars.OAuthTwitchClientID,
		ClientSecret: vars.OAuthTwitchClientSecret,
		RedirectURL:  vars.OAuthTwitchRedirectURL,
		Scopes:       []string{"user:read:email"},
	})
	{{- end }}

	{{- if .OAuthStripe }}
	providers["stripe"] = oauth.NewStripeProvider(&oauth2.Config{
		ClientID:     vars.OAuthStripeClientID,
		ClientSecret: vars.OAuthStripeClientSecret,
		RedirectURL:  vars.OAuthStripeRedirectURL,
		Scopes:       []string{"read_only"},
	})
	{{- end }}

	{{- if .OAuthX }}
	providers["x"] = oauth.NewXProvider(&oauth2.Config{
		ClientID:     vars.OAuthXClientID,
		ClientSecret: vars.OAuthXClientSecret,
		RedirectURL:  vars.OAuthXRedirectURL,
		Scopes:       []string{"users.read", "tweet.read"},
	})
	{{- end }}

	{{- if .OAuthMicrosoft }}
	providers["microsoft"] = oauth.NewMicrosoftProvider(&oauth2.Config{
		ClientID:     vars.OAuthMicrosoftClientID,
		ClientSecret: vars.OAuthMicrosoftClientSecret,
		RedirectURL:  vars.OAuthMicrosoftRedirectURL,
		Scopes:       []string{"openid", "email", "profile"},
	})
	{{- end }}

	{{- if .OAuthSlack }}
	providers["slack"] = oauth.NewSlackProvider(&oauth2.Config{
		ClientID:     vars.OAuthSlackClientID,
		ClientSecret: vars.OAuthSlackClientSecret,
		RedirectURL:  vars.OAuthSlackRedirectURL,
		Scopes:       []string{"identity.basic", "identity.email", "identity.avatar"},
	})
	{{- end }}

	{{- if .OAuthSpotify }}
	providers["spotify"] = oauth.NewSpotifyProvider(&oauth2.Config{
		ClientID:     vars.OAuthSpotifyClientID,
		ClientSecret: vars.OAuthSpotifyClientSecret,
		RedirectURL:  vars.OAuthSpotifyRedirectURL,
		Scopes:       []string{"user-read-email"},
	})
	{{- end }}

	return oauth.NewRegistry(providers)
}
{{- end }}

{{- if .HasOIDC }}
func newOIDCRegistry(vars *env.EnvironmentVariables) *oidc.Registry {
	providers := make(map[string]*oidc.Provider)

	{{- if .OIDCGoogle }}
	googleOIDC := oauth.NewGoogleProvider(&oauth2.Config{
		ClientID:     vars.OAuthGoogleClientID,
		ClientSecret: vars.OAuthGoogleClientSecret,
		RedirectURL:  vars.OIDCGoogleRedirectURL,
		Scopes:       []string{"openid", "profile", "email"},
	})
	providers["google"] = oidc.NewGoogleProvider(googleOIDC, vars.OAuthGoogleClientID)
	{{- end }}

	{{- if .OIDCMicrosoft }}
	microsoftOIDC := oauth.NewMicrosoftProvider(&oauth2.Config{
		ClientID:     vars.OAuthMicrosoftClientID,
		ClientSecret: vars.OAuthMicrosoftClientSecret,
		RedirectURL:  vars.OIDCMicrosoftRedirectURL,
		Scopes:       []string{"openid", "email", "profile"},
	})
	providers["microsoft"] = oidc.NewMicrosoftProvider(microsoftOIDC, vars.OAuthMicrosoftClientID)
	{{- end }}

	{{- if .OIDCFacebook }}
	facebookOIDC := oauth.NewFacebookProvider(&oauth2.Config{
		ClientID:     vars.OAuthFacebookClientID,
		ClientSecret: vars.OAuthFacebookClientSecret,
		RedirectURL:  vars.OIDCFacebookRedirectURL,
		Scopes:       []string{"openid", "email"},
	})
	providers["facebook"] = oidc.NewFacebookProvider(facebookOIDC, vars.OAuthFacebookClientID)
	{{- end }}

	{{- if .OIDCLinkedIn }}
	linkedinOIDC := oauth.NewLinkedInProvider(&oauth2.Config{
		ClientID:     vars.OAuthLinkedInClientID,
		ClientSecret: vars.OAuthLinkedInClientSecret,
		RedirectURL:  vars.OIDCLinkedInRedirectURL,
		Scopes:       []string{"openid", "r_liteprofile", "r_emailaddress"},
	})
	providers["linkedin"] = oidc.NewLinkedInProvider(linkedinOIDC, vars.OAuthLinkedInClientID)
	{{- end }}

	{{- if .OIDCDiscord }}
	discordOIDC := oauth.NewDiscordProvider(&oauth2.Config{
		ClientID:     vars.OAuthDiscordClientID,
		ClientSecret: vars.OAuthDiscordClientSecret,
		RedirectURL:  vars.OIDCDiscordRedirectURL,
		Scopes:       []string{"identify", "email", "openid"},
	})
	providers["discord"] = oidc.NewDiscordProvider(discordOIDC, vars.OAuthDiscordClientID)
	{{- end }}

	{{- if .OIDCTwitch }}
	twitchOIDC := oauth.NewTwitchProvider(&oauth2.Config{
		ClientID:     vars.OAuthTwitchClientID,
		ClientSecret: vars.OAuthTwitchClientSecret,
		RedirectURL:  vars.OIDCTwitchRedirectURL,
		Scopes:       []string{"openid", "user:read:email"},
	})
	providers["twitch"] = oidc.NewTwitchProvider(twitchOIDC, vars.OAuthTwitchClientID)
	{{- end }}

	return oidc.NewRegistry(providers)
}
{{- end }}
