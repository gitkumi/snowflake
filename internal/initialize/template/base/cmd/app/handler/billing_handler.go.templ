package handler

import (
	"{{ .Name }}/cmd/app/dto"
	"{{ .Name }}/cmd/app/service"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

type BillingHandler struct {
	Service *service.BillingService
}

func NewBillingHandler(s *service.BillingService) *BillingHandler {
	return &BillingHandler{Service: s}
}

func (h *BillingHandler) CreateCustomer(c *gin.Context) {
	var input dto.CreateCustomer
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	customer, err := h.Service.CreateCustomer(c.Request.Context(), input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"data": customer})
}

func (h *BillingHandler) GetCustomer(c *gin.Context) {
	customerID := c.Param("id")

	customer, err := h.Service.GetCustomer(c.Request.Context(), customerID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": customer})
}

func (h *BillingHandler) UpdateCustomer(c *gin.Context) {
	customerID := c.Param("id")

	var input dto.UpdateCustomer
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	customer, err := h.Service.UpdateCustomer(c.Request.Context(), customerID, input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": customer})
}

func (h *BillingHandler) DeleteCustomer(c *gin.Context) {
	customerID := c.Param("id")

	err := h.Service.DeleteCustomer(c.Request.Context(), customerID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.Status(http.StatusNoContent)
}

func (h *BillingHandler) ListCustomers(c *gin.Context) {
	limit := int64(10)
	if limitStr := c.Query("limit"); limitStr != "" {
		if l, err := strconv.ParseInt(limitStr, 10, 64); err == nil {
			limit = l
		}
	}

	customers, err := h.Service.ListCustomers(c.Request.Context(), limit)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": customers})
}

func (h *BillingHandler) CreatePaymentIntent(c *gin.Context) {
	var input dto.CreatePaymentIntent
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	paymentIntent, err := h.Service.CreatePaymentIntent(c.Request.Context(), input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"data": paymentIntent})
}

func (h *BillingHandler) GetPaymentIntent(c *gin.Context) {
	paymentIntentID := c.Param("id")

	paymentIntent, err := h.Service.GetPaymentIntent(c.Request.Context(), paymentIntentID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": paymentIntent})
}

func (h *BillingHandler) CancelPaymentIntent(c *gin.Context) {
	paymentIntentID := c.Param("id")

	paymentIntent, err := h.Service.CancelPaymentIntent(c.Request.Context(), paymentIntentID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": paymentIntent})
}

func (h *BillingHandler) CreateSubscription(c *gin.Context) {
	var input dto.CreateSubscription
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	subscription, err := h.Service.CreateSubscription(c.Request.Context(), input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"data": subscription})
}

func (h *BillingHandler) GetSubscription(c *gin.Context) {
	subscriptionID := c.Param("id")

	subscription, err := h.Service.GetSubscription(c.Request.Context(), subscriptionID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": subscription})
}

func (h *BillingHandler) UpdateSubscription(c *gin.Context) {
	subscriptionID := c.Param("id")

	var input dto.UpdateSubscription
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	subscription, err := h.Service.UpdateSubscription(c.Request.Context(), subscriptionID, input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": subscription})
}

func (h *BillingHandler) CancelSubscription(c *gin.Context) {
	subscriptionID := c.Param("id")

	var input dto.CancelSubscription
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	subscription, err := h.Service.CancelSubscription(c.Request.Context(), subscriptionID, input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": subscription})
}

func (h *BillingHandler) ListSubscriptions(c *gin.Context) {
	customerID := c.Query("customer_id")
	if customerID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "customer_id is required"})
		return
	}

	limit := int64(10)
	if limitStr := c.Query("limit"); limitStr != "" {
		if l, err := strconv.ParseInt(limitStr, 10, 64); err == nil {
			limit = l
		}
	}

	subscriptions, err := h.Service.ListSubscriptions(c.Request.Context(), customerID, limit)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": subscriptions})
}

func (h *BillingHandler) CreateCheckoutSession(c *gin.Context) {
	var input dto.CreateCheckoutSession
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	session, err := h.Service.CreateCheckoutSession(c.Request.Context(), input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"data": session})
}

func (h *BillingHandler) GetCheckoutSession(c *gin.Context) {
	sessionID := c.Param("id")

	session, err := h.Service.GetCheckoutSession(c.Request.Context(), sessionID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": session})
}

func (h *BillingHandler) CreateProduct(c *gin.Context) {
	var input dto.CreateProduct
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	product, err := h.Service.CreateProduct(c.Request.Context(), input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"data": product})
}

func (h *BillingHandler) GetProduct(c *gin.Context) {
	productID := c.Param("id")

	product, err := h.Service.GetProduct(c.Request.Context(), productID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": product})
}

func (h *BillingHandler) UpdateProduct(c *gin.Context) {
	productID := c.Param("id")

	var input dto.UpdateProduct
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	product, err := h.Service.UpdateProduct(c.Request.Context(), productID, input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": product})
}

func (h *BillingHandler) ListProducts(c *gin.Context) {
	limit := int64(10)
	if limitStr := c.Query("limit"); limitStr != "" {
		if l, err := strconv.ParseInt(limitStr, 10, 64); err == nil {
			limit = l
		}
	}

	products, err := h.Service.ListProducts(c.Request.Context(), limit)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": products})
}

func (h *BillingHandler) CreatePrice(c *gin.Context) {
	var input dto.CreatePrice
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	price, err := h.Service.CreatePrice(c.Request.Context(), input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"data": price})
}

func (h *BillingHandler) GetPrice(c *gin.Context) {
	priceID := c.Param("id")

	price, err := h.Service.GetPrice(c.Request.Context(), priceID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": price})
}

func (h *BillingHandler) ListPrices(c *gin.Context) {
	limit := int64(10)
	if limitStr := c.Query("limit"); limitStr != "" {
		if l, err := strconv.ParseInt(limitStr, 10, 64); err == nil {
			limit = l
		}
	}

	prices, err := h.Service.ListPrices(c.Request.Context(), limit)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": prices})
}

func (h *BillingHandler) CreateRefund(c *gin.Context) {
	var input dto.CreateRefund
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	refund, err := h.Service.CreateRefund(c.Request.Context(), input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"data": refund})
}

func (h *BillingHandler) GetRefund(c *gin.Context) {
	refundID := c.Param("id")

	refund, err := h.Service.GetRefund(c.Request.Context(), refundID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": refund})
}

