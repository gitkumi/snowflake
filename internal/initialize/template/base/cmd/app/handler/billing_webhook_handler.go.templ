package handler

import (
	"encoding/json"
	"io"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/stripe/stripe-go/v83"
	"github.com/stripe/stripe-go/v83/webhook"
)

type WebhookHandler struct {
	webhookSecret string
}

func NewWebhookHandler(webhookSecret string) *WebhookHandler {
	return &WebhookHandler{
		webhookSecret: webhookSecret,
	}
}

func (h *WebhookHandler) HandleWebhook(c *gin.Context) {
	payload, err := io.ReadAll(c.Request.Body)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error reading request body"})
		return
	}

	signature := c.GetHeader("Stripe-Signature")
	event, err := webhook.ConstructEvent(payload, signature, h.webhookSecret)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid signature"})
		return
	}

	switch event.Type {
	case "payment_intent.succeeded":
		h.handlePaymentIntentSucceeded(c, event)
	case "payment_intent.payment_failed":
		h.handlePaymentIntentFailed(c, event)
	case "customer.created":
		h.handleCustomerCreated(c, event)
	case "customer.updated":
		h.handleCustomerUpdated(c, event)
	case "customer.deleted":
		h.handleCustomerDeleted(c, event)
	case "customer.subscription.created":
		h.handleSubscriptionCreated(c, event)
	case "customer.subscription.updated":
		h.handleSubscriptionUpdated(c, event)
	case "customer.subscription.deleted":
		h.handleSubscriptionDeleted(c, event)
	case "customer.subscription.trial_will_end":
		h.handleSubscriptionTrialWillEnd(c, event)
	case "invoice.paid":
		h.handleInvoicePaid(c, event)
	case "invoice.payment_failed":
		h.handleInvoicePaymentFailed(c, event)
	case "invoice.upcoming":
		h.handleInvoiceUpcoming(c, event)
	case "checkout.session.completed":
		h.handleCheckoutSessionCompleted(c, event)
	case "checkout.session.expired":
		h.handleCheckoutSessionExpired(c, event)
	default:
		// Log unknown event type but return success
		c.JSON(http.StatusOK, gin.H{"message": "Unhandled event type: " + event.Type})
		return
	}

	c.JSON(http.StatusOK, gin.H{"received": true})
}

func (h *WebhookHandler) handlePaymentIntentSucceeded(c *gin.Context, event stripe.Event) {
	var paymentIntent stripe.PaymentIntent
	if err := json.Unmarshal(event.Data.Raw, &paymentIntent); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Update order status in database
	// - Send confirmation email
	// - Fulfill order
	// - Update user subscription status
}

func (h *WebhookHandler) handlePaymentIntentFailed(c *gin.Context, event stripe.Event) {
	var paymentIntent stripe.PaymentIntent
	if err := json.Unmarshal(event.Data.Raw, &paymentIntent); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Send failure notification to customer
	// - Update order status to failed
	// - Trigger retry logic
	// - Alert admin
}

func (h *WebhookHandler) handleCustomerCreated(c *gin.Context, event stripe.Event) {
	var customer stripe.Customer
	if err := json.Unmarshal(event.Data.Raw, &customer); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Store customer ID in your database
	// - Associate with internal user record
	// - Send welcome email
}

func (h *WebhookHandler) handleCustomerUpdated(c *gin.Context, event stripe.Event) {
	var customer stripe.Customer
	if err := json.Unmarshal(event.Data.Raw, &customer); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Update customer record in database
	// - Sync email changes
	// - Update payment method status
}

func (h *WebhookHandler) handleCustomerDeleted(c *gin.Context, event stripe.Event) {
	var customer stripe.Customer
	if err := json.Unmarshal(event.Data.Raw, &customer); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Mark customer as deleted in database
	// - Clean up related records
	// - Cancel any active subscriptions
}

func (h *WebhookHandler) handleSubscriptionCreated(c *gin.Context, event stripe.Event) {
	var subscription stripe.Subscription
	if err := json.Unmarshal(event.Data.Raw, &subscription); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Grant access to subscription features
	// - Store subscription ID in database
	// - Send subscription confirmation email
	// - Update user role/permissions
}

func (h *WebhookHandler) handleSubscriptionUpdated(c *gin.Context, event stripe.Event) {
	var subscription stripe.Subscription
	if err := json.Unmarshal(event.Data.Raw, &subscription); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Update subscription status in database
	// - Handle plan changes
	// - Adjust user access based on status
	// - Handle cancellation at period end
}

func (h *WebhookHandler) handleSubscriptionDeleted(c *gin.Context, event stripe.Event) {
	var subscription stripe.Subscription
	if err := json.Unmarshal(event.Data.Raw, &subscription); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Revoke subscription access
	// - Update user status in database
	// - Send cancellation confirmation
	// - Trigger retention workflow
}

func (h *WebhookHandler) handleSubscriptionTrialWillEnd(c *gin.Context, event stripe.Event) {
	var subscription stripe.Subscription
	if err := json.Unmarshal(event.Data.Raw, &subscription); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Send reminder email about trial ending
	// - Prompt user to add payment method
	// - Offer conversion incentive
}

func (h *WebhookHandler) handleInvoicePaid(c *gin.Context, event stripe.Event) {
	var invoice stripe.Invoice
	if err := json.Unmarshal(event.Data.Raw, &invoice); err != nil{
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Update invoice status in database
	// - Send receipt to customer
	// - Extend subscription period
	// - Update payment history
}

func (h *WebhookHandler) handleInvoicePaymentFailed(c *gin.Context, event stripe.Event) {
	var invoice stripe.Invoice
	if err := json.Unmarshal(event.Data.Raw, &invoice); err != nil{
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Send payment failure notification
	// - Update subscription status
	// - Trigger dunning process
	// - Suspend account access
}

func (h *WebhookHandler) handleInvoiceUpcoming(c *gin.Context, event stripe.Event) {
	var invoice stripe.Invoice
	if err := json.Unmarshal(event.Data.Raw, &invoice); err != nil{
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Send upcoming charge notification
	// - Update metered usage
	// - Apply discounts or coupons
	// - Adjust invoice items
}

func (h *WebhookHandler) handleCheckoutSessionCompleted(c *gin.Context, event stripe.Event) {
	var session stripe.CheckoutSession
	if err := json.Unmarshal(event.Data.Raw, &session); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Fulfill order
	// - Grant subscription access
	// - Send confirmation email
	// - Update order status in database
}

func (h *WebhookHandler) handleCheckoutSessionExpired(c *gin.Context, event stripe.Event) {
	var session stripe.CheckoutSession
	if err := json.Unmarshal(event.Data.Raw, &session); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Error parsing payload"})
		return
	}

	// TODO: Implement your business logic here
	// Examples:
	// - Clean up pending orders
	// - Send reminder to complete checkout
	// - Update session status
}

