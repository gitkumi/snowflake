package application

import (
	"{{ .Name }}/internal/env"
	"{{ .Name }}/internal/middleware"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
)

type RouterConfig struct {
	GinMode string
}

func NewRouter(cfg *RouterConfig) *gin.Engine {
	gin.SetMode(cfg.GinMode)

	router := gin.Default()
	router.Use(cors.Default())

	return router
}

func (app *Application) RegisterRoutes() error {
	app.Router.Use(middleware.SecurityHeadersMiddleware())

	if app.Environment == env.Production {
		app.Router.Use(middleware.LoggingMiddleware(app.Logger))
	}
	
	{{- if .ServeHTML }}
	app.Router.GET("/", app.handlers.html.TopPage)
	{{- end }}

	{{- if eq .Billing.String "stripe" }}
	app.Router.POST("/webhook/billing", app.handlers.webhook.HandleWebhook)
	{{- end }}

	api := app.Router.Group("/api")
	api.GET("/health", app.handlers.health.Health)

	{{- if .HasOAuth }}
	api.GET("/oauth/:provider/authorize", app.handlers.oauth.Authorize)
	api.GET("/oauth/:provider/callback", app.handlers.oauth.Callback)
	{{- end }}
	
	{{- if .HasOIDC }}
	api.GET("/oidc/:provider/authorize", app.handlers.oidc.Authorize)
	api.GET("/oidc/:provider/callback", app.handlers.oidc.Callback)
	{{- end }}
	
	{{- if ne .Database.String "none" }}
	api.GET("/books", app.handlers.book.ListBook)
	api.GET("/books/:id", app.handlers.book.GetBook)
	api.POST("/books", app.handlers.book.CreateBook)
	api.PATCH("/books/:id", app.handlers.book.UpdateBook)
	api.DELETE("/books/:id", app.handlers.book.DeleteBook)
	{{- end }}

	{{- if eq .Billing.String "stripe" }}
	billing := api.Group("/billing")
	
	billing.POST("/customers", app.handlers.billing.CreateCustomer)
	billing.GET("/customers/:id", app.handlers.billing.GetCustomer)
	billing.PATCH("/customers/:id", app.handlers.billing.UpdateCustomer)
	billing.DELETE("/customers/:id", app.handlers.billing.DeleteCustomer)
	billing.GET("/customers", app.handlers.billing.ListCustomers)
	
	billing.POST("/payment-intents", app.handlers.billing.CreatePaymentIntent)
	billing.GET("/payment-intents/:id", app.handlers.billing.GetPaymentIntent)
	billing.POST("/payment-intents/:id/cancel", app.handlers.billing.CancelPaymentIntent)
	
	billing.POST("/subscriptions", app.handlers.billing.CreateSubscription)
	billing.GET("/subscriptions/:id", app.handlers.billing.GetSubscription)
	billing.PATCH("/subscriptions/:id", app.handlers.billing.UpdateSubscription)
	billing.POST("/subscriptions/:id/cancel", app.handlers.billing.CancelSubscription)
	billing.GET("/subscriptions", app.handlers.billing.ListSubscriptions)
	
	billing.POST("/checkout-sessions", app.handlers.billing.CreateCheckoutSession)
	billing.GET("/checkout-sessions/:id", app.handlers.billing.GetCheckoutSession)
	
	billing.POST("/products", app.handlers.billing.CreateProduct)
	billing.GET("/products/:id", app.handlers.billing.GetProduct)
	billing.PATCH("/products/:id", app.handlers.billing.UpdateProduct)
	billing.GET("/products", app.handlers.billing.ListProducts)
	
	billing.POST("/prices", app.handlers.billing.CreatePrice)
	billing.GET("/prices/:id", app.handlers.billing.GetPrice)
	billing.GET("/prices", app.handlers.billing.ListPrices)
	
	billing.POST("/refunds", app.handlers.billing.CreateRefund)
	billing.GET("/refunds/:id", app.handlers.billing.GetRefund)
	{{- end }}

	return nil
}
