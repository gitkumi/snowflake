{{- if ne .Database.String "none" }}
export GOOSE_DBSTRING?={{.Database.ConnString .Name }}
export GOOSE_DRIVER:={{.Database.Driver}}
export GOOSE_MIGRATION_DIR:=./static/sql/migrations
{{- end }}

.PHONY: audit
audit: 
	go mod tidy -diff
	go mod verify
	test -z "$(shell gofmt -l .)" 
	go vet ./...
	go run honnef.co/go/tools/cmd/staticcheck@latest -checks=all,-ST1000,-U1000 ./...
	go run golang.org/x/vuln/cmd/govulncheck@latest ./...

.PHONY: tidy
tidy:
	go mod tidy -v
	go fmt ./...

.PHONY: run
run:
{{- if eq .AppType "web"}}
	go run cmd/web/*.go
{{- else }}
	go run cmd/api/*.go
{{- end }}

.PHONY: test
test:
	gotestsum -f testname

.PHONY: dev
dev:
	air

.PHONY: build
build:
{{- if ne .Database.String "none" }}
	sqlc generate
{{- end }}
{{- if eq .AppType "web"}}
	templ generate
	go build -o bin/main cmd/web/*.go
{{- else }}
	go build -o bin/main cmd/api/*.go
{{- end }}

{{- if ne .Database.String "none" }}

.PHONY: db
db:
	goose status

.PHONY: db.gen
db.gen:
	goose create $(filter-out $@,$(MAKECMDGOALS)) sql

.PHONY: db.up
db.up:
	goose up

.PHONY: db.down
db.down:
	goose down

	{{- if ne .Database.String "sqlite3"}}

.PHONY: devenv.up
devenv.up:
	docker compose -f dev.yaml up -d

.PHONY: devenv.down
devenv.down:
	docker rm container dev_mysql -f
	docker compose -f dev.yaml down -v

.PHONY: db.create
db.create:
	docker exec -i dev_mysql \
		mysql -uroot -pmysql -e "CREATE DATABASE IF NOT EXISTS {{ .Name }};"

.PHONY: db.drop
db.drop:
	docker exec -i dev_mysql \
		mysql -uroot -pmysql -e "DROP DATABASE IF EXISTS {{ .Name }};"
	{{- end }}
{{- end }}
%:
	@:
