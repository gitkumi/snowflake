package oauth

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"time"

	"golang.org/x/oauth2"
)

// InstagramEndpoint is the Instagram OAuth 2.0 endpoint.
var InstagramEndpoint = oauth2.Endpoint{
	AuthURL:  "https://api.instagram.com/oauth/authorize",
	TokenURL: "https://api.instagram.com/oauth/access_token",
}

type InstagramOAuth struct {
	Config       *oauth2.Config
	StateTimeout time.Duration
	states       map[string]time.Time
}

type InstagramUser struct {
	ID       string `json:"id"`
	{{- if eq .Authentication "email-with-username"}}
	Username string `json:"username"`
	{{- end }}
	Name     string `json:"full_name"`
	Picture  string `json:"profile_picture"`
}

type instagramTokenResponse struct {
	AccessToken string `json:"access_token"`
	UserInfo    struct {
		ID       string `json:"id"`
		{{- if eq .Authentication "email-with-username"}}
		Username string `json:"username"`
		{{- end }}
	} `json:"user"`
}

func NewInstagramOAuth(clientID, clientSecret, redirectURL string) *InstagramOAuth {
	config := &oauth2.Config{
		ClientID:     clientID,
		ClientSecret: clientSecret,
		RedirectURL:  redirectURL,
		Scopes: []string{
			"user_profile",
			"user_media",
		},
		Endpoint: InstagramEndpoint,
	}

	return &InstagramOAuth{
		Config:       config,
		StateTimeout: 10 * time.Minute,
		states:       make(map[string]time.Time),
	}
}

func (i *InstagramOAuth) GenerateState() (string, error) {
	b := make([]byte, 32)
	if _, err := rand.Read(b); err != nil {
		return "", err
	}

	state := base64.StdEncoding.EncodeToString(b)
	i.states[state] = time.Now().Add(i.StateTimeout)

	for s, t := range i.states {
		if time.Now().After(t) {
			delete(i.states, s)
		}
	}

	return state, nil
}

func (i *InstagramOAuth) VerifyState(state string) bool {
	expiry, exists := i.states[state]
	if !exists {
		return false
	}

	valid := time.Now().Before(expiry)
	delete(i.states, state)
	return valid
}

func (i *InstagramOAuth) GetLoginURL(state string) string {
	return i.Config.AuthCodeURL(state)
}

func (i *InstagramOAuth) Exchange(ctx context.Context, code string) (*oauth2.Token, error) {
	return i.Config.Exchange(ctx, code)
}

func (i *InstagramOAuth) GetUserInfo(ctx context.Context, token *oauth2.Token) (interface{}, error) {
	client := i.Config.Client(ctx, token)

	resp, err := client.Get("https://graph.instagram.com/me?fields=id,username,account_type,media_count")
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("failed to get user info: %s", resp.Status)
	}

	data, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var user InstagramUser
	if err := json.Unmarshal(data, &user); err != nil {
		return nil, err
	}

	if user.ID == "" {
		return nil, errors.New("ID not provided by Instagram")
	}

	return &user, nil
}
