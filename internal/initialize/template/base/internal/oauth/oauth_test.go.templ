package oauth

import (
	"context"
	"strings"
	"testing"
	"time"

	"golang.org/x/oauth2"
)

// TestOAuthProviderInterface tests the common behaviors expected of all OAuth providers
func TestOAuthProviderInterface(t *testing.T) {
	t.Run("GitHub Provider", func(t *testing.T) {
		testOAuthProvider(t, NewMockGitHubOAuth())
	})

	t.Run("Google Provider", func(t *testing.T) {
		testOAuthProvider(t, NewMockGoogleOAuth())
	})

	t.Run("Facebook Provider", func(t *testing.T) {
		testOAuthProvider(t, NewMockFacebookOAuth())
	})

	t.Run("LinkedIn Provider", func(t *testing.T) {
		testOAuthProvider(t, NewMockLinkedInOAuth())
	})

	t.Run("Instagram Provider", func(t *testing.T) {
		testOAuthProvider(t, NewMockInstagramOAuth())
	})

	t.Run("Discord Provider", func(t *testing.T) {
		testOAuthProvider(t, NewMockDiscordOAuth())
	})
}

// testOAuthProvider tests the behaviors expected of any OAuth provider
func testOAuthProvider(t *testing.T, provider OAuthProvider) {
	// 1. Test GenerateState
	state, err := provider.GenerateState()
	if err != nil {
		t.Fatalf("GenerateState should not return an error: %v", err)
	}
	if state == "" {
		t.Fatal("Generated state should not be empty")
	}

	// 2. Test VerifyState
	valid := provider.VerifyState(state)
	if !valid {
		t.Error("State should be valid")
	}
	
	// 3. Test VerifyState with invalid state
	valid = provider.VerifyState("invalid-state")
	if valid {
		t.Error("Invalid state should not be valid")
	}

	// 4. Test GetLoginURL
	loginURL := provider.GetLoginURL(state)
	if loginURL == "" {
		t.Error("Login URL should not be empty")
	}
	if !strings.Contains(loginURL, "state=") {
		t.Error("Login URL should contain state parameter")
	}

	// 5. Test Exchange
	ctx := context.Background()
	token, err := provider.Exchange(ctx, "valid-code")
	if err != nil {
		t.Fatalf("Exchange should not return an error with valid code: %v", err)
	}
	if token == nil {
		t.Fatal("Token should not be nil")
	}
	if token.AccessToken == "" {
		t.Error("Access token should not be empty")
	}

	// 6. Test GetUserInfo
	userInfo, err := provider.GetUserInfo(ctx, token)
	if err != nil {
		t.Fatalf("GetUserInfo should not return an error: %v", err)
	}
	if userInfo == nil {
		t.Fatal("User info should not be nil")
	}
}

// TestGitHubProvider tests GitHub-specific provider functionality
func TestGitHubProvider(t *testing.T) {
	mock := NewMockGitHubOAuth()

	// Test error cases
	t.Run("Exchange Error", func(t *testing.T) {
		mock.ErrorOnExchange = true
		ctx := context.Background()
		_, err := mock.Exchange(ctx, "invalid-code")
		if err == nil {
			t.Error("Exchange should return an error with invalid code")
		}
		mock.ErrorOnExchange = false
	})

	t.Run("GetUserInfo Error", func(t *testing.T) {
		mock.ErrorOnGetUserInfo = true
		ctx := context.Background()
		token := &oauth2.Token{AccessToken: "valid-token"}
		_, err := mock.GetUserInfo(ctx, token)
		if err == nil {
			t.Error("GetUserInfo should return an error when provider fails")
		}
		mock.ErrorOnGetUserInfo = false
	})

	t.Run("State Expiry", func(t *testing.T) {
		// Generate a state
		state, err := mock.GenerateState()
		if err != nil {
			t.Fatal(err)
		}
		
		// Manually expire the state
		for s := range mock.states {
			mock.states[s] = time.Now().Add(-1 * time.Hour)
		}
		
		// Verify the state (should fail due to expiration)
		valid := mock.VerifyState(state)
		if valid {
			t.Error("Expired state should not be valid")
		}
	})
}

// TestGoogleProvider tests Google-specific provider functionality
func TestGoogleProvider(t *testing.T) {
	mock := NewMockGoogleOAuth()

	// Test error cases
	t.Run("Exchange Error", func(t *testing.T) {
		mock.ErrorOnExchange = true
		ctx := context.Background()
		_, err := mock.Exchange(ctx, "invalid-code")
		if err == nil {
			t.Error("Exchange should return an error with invalid code")
		}
		mock.ErrorOnExchange = false
	})

	t.Run("GetUserInfo Error", func(t *testing.T) {
		mock.ErrorOnGetUserInfo = true
		ctx := context.Background()
		token := &oauth2.Token{AccessToken: "valid-token"}
		_, err := mock.GetUserInfo(ctx, token)
		if err == nil {
			t.Error("GetUserInfo should return an error when provider fails")
		}
		mock.ErrorOnGetUserInfo = false
	})
}

// Add similar provider-specific tests for other providers
func TestFacebookProvider(t *testing.T) {
	mock := NewMockFacebookOAuth()
	
	t.Run("Exchange Error", func(t *testing.T) {
		mock.ErrorOnExchange = true
		ctx := context.Background()
		_, err := mock.Exchange(ctx, "invalid-code")
		if err == nil {
			t.Error("Exchange should return an error with invalid code")
		}
		mock.ErrorOnExchange = false
	})

	t.Run("GetUserInfo Error", func(t *testing.T) {
		mock.ErrorOnGetUserInfo = true
		ctx := context.Background()
		token := &oauth2.Token{AccessToken: "valid-token"}
		_, err := mock.GetUserInfo(ctx, token)
		if err == nil {
			t.Error("GetUserInfo should return an error when provider fails")
		}
		mock.ErrorOnGetUserInfo = false
	})
}

func TestLinkedInProvider(t *testing.T) {
	mock := NewMockLinkedInOAuth()
	
	t.Run("Exchange Error", func(t *testing.T) {
		mock.ErrorOnExchange = true
		ctx := context.Background()
		_, err := mock.Exchange(ctx, "invalid-code")
		if err == nil {
			t.Error("Exchange should return an error with invalid code")
		}
		mock.ErrorOnExchange = false
	})

	t.Run("GetUserInfo Error", func(t *testing.T) {
		mock.ErrorOnGetUserInfo = true
		ctx := context.Background()
		token := &oauth2.Token{AccessToken: "valid-token"}
		_, err := mock.GetUserInfo(ctx, token)
		if err == nil {
			t.Error("GetUserInfo should return an error when provider fails")
		}
		mock.ErrorOnGetUserInfo = false
	})
}

func TestInstagramProvider(t *testing.T) {
	mock := NewMockInstagramOAuth()
	
	t.Run("Exchange Error", func(t *testing.T) {
		mock.ErrorOnExchange = true
		ctx := context.Background()
		_, err := mock.Exchange(ctx, "invalid-code")
		if err == nil {
			t.Error("Exchange should return an error with invalid code")
		}
		mock.ErrorOnExchange = false
	})

	t.Run("GetUserInfo Error", func(t *testing.T) {
		mock.ErrorOnGetUserInfo = true
		ctx := context.Background()
		token := &oauth2.Token{AccessToken: "valid-token"}
		_, err := mock.GetUserInfo(ctx, token)
		if err == nil {
			t.Error("GetUserInfo should return an error when provider fails")
		}
		mock.ErrorOnGetUserInfo = false
	})
}

func TestDiscordProvider(t *testing.T) {
	mock := NewMockDiscordOAuth()
	
	t.Run("Exchange Error", func(t *testing.T) {
		mock.ErrorOnExchange = true
		ctx := context.Background()
		_, err := mock.Exchange(ctx, "invalid-code")
		if err == nil {
			t.Error("Exchange should return an error with invalid code")
		}
		mock.ErrorOnExchange = false
	})

	t.Run("GetUserInfo Error", func(t *testing.T) {
		mock.ErrorOnGetUserInfo = true
		ctx := context.Background()
		token := &oauth2.Token{AccessToken: "valid-token"}
		_, err := mock.GetUserInfo(ctx, token)
		if err == nil {
			t.Error("GetUserInfo should return an error when provider fails")
		}
		mock.ErrorOnGetUserInfo = false
	})
} 