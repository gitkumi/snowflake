package oauth

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"time"

	"golang.org/x/oauth2"
)

// DiscordEndpoint is the Discord OAuth 2.0 endpoint.
var DiscordEndpoint = oauth2.Endpoint{
	AuthURL:  "https://discord.com/api/oauth2/authorize",
	TokenURL: "https://discord.com/api/oauth2/token",
}

type DiscordOAuth struct {
	Config       *oauth2.Config
	StateTimeout time.Duration
	states       map[string]time.Time
}

type DiscordUser struct {
	ID            string `json:"id"`
	{{- if eq .Authentication "email-with-username"}}
	Username      string `json:"username"`
	{{- end }}
	Discriminator string `json:"discriminator"`
	Avatar        string `json:"avatar"`
	Email         string `json:"email"`
	Verified      bool   `json:"verified"`
	GlobalName    string `json:"global_name"`
}

func NewDiscordOAuth(clientID, clientSecret, redirectURL string) *DiscordOAuth {
	config := &oauth2.Config{
		ClientID:     clientID,
		ClientSecret: clientSecret,
		RedirectURL:  redirectURL,
		Scopes: []string{
			"identify",
			"email",
		},
		Endpoint: DiscordEndpoint,
	}

	return &DiscordOAuth{
		Config:       config,
		StateTimeout: 10 * time.Minute,
		states:       make(map[string]time.Time),
	}
}

func (d *DiscordOAuth) GenerateState() (string, error) {
	b := make([]byte, 32)
	if _, err := rand.Read(b); err != nil {
		return "", err
	}

	state := base64.StdEncoding.EncodeToString(b)
	d.states[state] = time.Now().Add(d.StateTimeout)

	for s, t := range d.states {
		if time.Now().After(t) {
			delete(d.states, s)
		}
	}

	return state, nil
}

func (d *DiscordOAuth) VerifyState(state string) bool {
	expiry, exists := d.states[state]
	if !exists {
		return false
	}

	valid := time.Now().Before(expiry)
	delete(d.states, state)
	return valid
}

func (d *DiscordOAuth) GetLoginURL(state string) string {
	return d.Config.AuthCodeURL(state)
}

func (d *DiscordOAuth) Exchange(ctx context.Context, code string) (*oauth2.Token, error) {
	return d.Config.Exchange(ctx, code)
}

func (d *DiscordOAuth) GetUserInfo(ctx context.Context, token *oauth2.Token) (interface{}, error) {
	client := d.Config.Client(ctx, token)

	req, err := http.NewRequest("GET", "https://discord.com/api/users/@me", nil)
	if err != nil {
		return nil, err
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("failed to get user info: %s", resp.Status)
	}

	data, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var user DiscordUser
	if err := json.Unmarshal(data, &user); err != nil {
		return nil, err
	}

	if user.ID == "" {
		return nil, errors.New("ID not provided by Discord")
	}

	if user.Email == "" {
		return nil, errors.New("email not provided by Discord")
	}

	if !user.Verified {
		return nil, errors.New("email not verified by Discord")
	}

	return &user, nil
}
