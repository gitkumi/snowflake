package oauth

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"time"

	"golang.org/x/oauth2"
)

// LinkedInEndpoint is the LinkedIn OAuth 2.0 endpoint.
var LinkedInEndpoint = oauth2.Endpoint{
	AuthURL:  "https://www.linkedin.com/oauth/v2/authorization",
	TokenURL: "https://www.linkedin.com/oauth/v2/accessToken",
}

type LinkedInOAuth struct {
	Config       *oauth2.Config
	StateTimeout time.Duration
	states       map[string]time.Time
}

type LinkedInUser struct {
	ID             string `json:"id"`
	Email          string `json:"email"`
	ProfilePicture struct {
		DisplayImage struct {
			Elements []struct {
				Identifiers []struct {
					Identifier string `json:"identifier"`
				} `json:"identifiers"`
			} `json:"elements"`
		} `json:"displayImage~"`
	} `json:"profilePicture"`
	FirstName struct {
		Localized       map[string]string `json:"localized"`
		PreferredLocale struct {
			Country  string `json:"country"`
			Language string `json:"language"`
		} `json:"preferredLocale"`
	} `json:"firstName"`
	LastName struct {
		Localized       map[string]string `json:"localized"`
		PreferredLocale struct {
			Country  string `json:"country"`
			Language string `json:"language"`
		} `json:"preferredLocale"`
	} `json:"lastName"`
}

type LinkedInEmail struct {
	Elements []struct {
		Handle struct {
			EmailAddress string `json:"emailAddress"`
		} `json:"handle~"`
		Primary bool `json:"primary"`
	} `json:"elements"`
}

func NewLinkedInOAuth(clientID, clientSecret, redirectURL string) *LinkedInOAuth {
	config := &oauth2.Config{
		ClientID:     clientID,
		ClientSecret: clientSecret,
		RedirectURL:  redirectURL,
		Scopes: []string{
			"r_liteprofile",
			"r_emailaddress",
		},
		Endpoint: LinkedInEndpoint,
	}

	return &LinkedInOAuth{
		Config:       config,
		StateTimeout: 10 * time.Minute,
		states:       make(map[string]time.Time),
	}
}

func (l *LinkedInOAuth) GenerateState() (string, error) {
	b := make([]byte, 32)
	if _, err := rand.Read(b); err != nil {
		return "", err
	}

	state := base64.StdEncoding.EncodeToString(b)
	l.states[state] = time.Now().Add(l.StateTimeout)

	for s, t := range l.states {
		if time.Now().After(t) {
			delete(l.states, s)
		}
	}

	return state, nil
}

func (l *LinkedInOAuth) VerifyState(state string) bool {
	expiry, exists := l.states[state]
	if !exists {
		return false
	}

	valid := time.Now().Before(expiry)
	delete(l.states, state)
	return valid
}

func (l *LinkedInOAuth) GetLoginURL(state string) string {
	return l.Config.AuthCodeURL(state)
}

func (l *LinkedInOAuth) Exchange(ctx context.Context, code string) (*oauth2.Token, error) {
	return l.Config.Exchange(ctx, code)
}

func (l *LinkedInOAuth) GetUserInfo(ctx context.Context, token *oauth2.Token) (interface{}, error) {
	client := l.Config.Client(ctx, token)

	// First, get the basic profile data (name, profile picture)
	resp, err := client.Get("https://api.linkedin.com/v2/me?projection=(id,firstName,lastName,profilePicture(displayImage~:playableStreams))")
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("failed to get user info: %s", resp.Status)
	}

	data, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var user LinkedInUser
	if err := json.Unmarshal(data, &user); err != nil {
		return nil, err
	}

	// Then, get the email address separately
	emailResp, err := client.Get("https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))")
	if err != nil {
		return nil, err
	}
	defer emailResp.Body.Close()

	if emailResp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("failed to get email info: %s", emailResp.Status)
	}

	emailData, err := io.ReadAll(emailResp.Body)
	if err != nil {
		return nil, err
	}

	var emailInfo LinkedInEmail
	if err := json.Unmarshal(emailData, &emailInfo); err != nil {
		return nil, err
	}

	// Find the primary or first email
	for _, element := range emailInfo.Elements {
		if element.Primary {
			user.Email = element.Handle.EmailAddress
			break
		}
	}

	// If no primary email found, just use the first one
	if user.Email == "" && len(emailInfo.Elements) > 0 {
		user.Email = emailInfo.Elements[0].Handle.EmailAddress
	}

	if user.Email == "" {
		return nil, errors.New("email not provided by LinkedIn")
	}

	return &user, nil
}
