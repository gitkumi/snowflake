package oauth

import (
	"context"
	"time"

	"golang.org/x/oauth2"
)

type MockGitHubOAuth struct {
	Config             *oauth2.Config
	StateTimeout       time.Duration
	states             map[string]time.Time
	UserToReturn       *GitHubUser
	TokenToReturn      *oauth2.Token
	ErrorOnExchange    bool
	ErrorOnGetUserInfo bool
	StoredStates       map[string]time.Time
	CalledWithCode     string
	CalledWithState    string
}

func NewMockGitHubOAuth() *MockGitHubOAuth {
	return &MockGitHubOAuth{
		Config: &oauth2.Config{
			ClientID:     "mock-client-id",
			ClientSecret: "mock-client-secret",
			RedirectURL:  "http://localhost/callback",
			Scopes:       []string{"user:email", "read:user"},
			Endpoint: oauth2.Endpoint{
				AuthURL:  "http://mock-auth-url",
				TokenURL: "http://mock-token-url",
			},
		},
		StateTimeout: 10 * time.Minute,
		states:       make(map[string]time.Time),
		StoredStates: make(map[string]time.Time),
		UserToReturn: &GitHubUser{
			ID:        12345,
			Login:     "testuser",
			NodeID:    "MDQ6VXNlcjEyMzQ1",
			AvatarURL: "https://example.com/avatar.jpg",
			Name:      "Test User",
			Email:     "test@example.com",
			Bio:       "Mock user for testing",
		},
		TokenToReturn: &oauth2.Token{
			AccessToken:  "mock-access-token",
			TokenType:    "Bearer",
			RefreshToken: "mock-refresh-token",
			Expiry:       time.Now().Add(1 * time.Hour),
		},
	}
}

func (m *MockGitHubOAuth) GenerateState() (string, error) {
	state := "mock-state-token"
	expiry := time.Now().Add(m.StateTimeout)
	m.states[state] = expiry
	m.StoredStates[state] = expiry
	return state, nil
}

func (m *MockGitHubOAuth) VerifyState(state string) bool {
	m.CalledWithState = state
	expiry, exists := m.states[state]
	if !exists {
		return false
	}

	valid := time.Now().Before(expiry)
	delete(m.states, state)
	return valid
}

func (m *MockGitHubOAuth) GetLoginURL(state string) string {
	return "http://mock-github-auth-url?state=" + state
}

func (m *MockGitHubOAuth) Exchange(ctx context.Context, code string) (*oauth2.Token, error) {
	m.CalledWithCode = code
	if m.ErrorOnExchange {
		return nil, &oauth2.RetrieveError{
			Response: nil,
			Body:     []byte("mock exchange error"),
		}
	}
	return m.TokenToReturn, nil
}

func (m *MockGitHubOAuth) GetUserInfo(ctx context.Context, token *oauth2.Token) (interface{}, error) {
	if m.ErrorOnGetUserInfo {
		return nil, &oauth2.RetrieveError{
			Response: nil,
			Body:     []byte("mock get user info error"),
		}
	}
	return m.UserToReturn, nil
}
