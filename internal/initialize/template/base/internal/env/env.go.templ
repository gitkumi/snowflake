package env

import (
	"fmt"
	"errors"
	"os"
	"path/filepath"
	"strconv"

	"github.com/joho/godotenv"
)

type Environment string

const (
	Production  Environment = "production"
	Staging     Environment = "staging"
	Development Environment = "development"
	Test        Environment = "test"
)

var AllEnvironments = []Environment{
	Production,
	Staging,
	Development,
	Test,
}

func (e Environment) IsValid() bool {
	for _, env := range AllEnvironments {
		if e == env {
			return true
		}
	}
	return false
}

type EnvironmentVariables struct {
	Environment Environment
	BaseURL     string
	Port        int
	GinMode     string

	{{- if ne .Database.String "none" }}
	DatabaseConnString string
	MigrateDatabase    bool
	{{- end }}

	{{- if .SMTP }}
	SmtpHost     string
	SmtpPort     int
	SmtpUsername string
	SmtpPassword string
	SmtpFrom     string
	{{- end }}

	{{- if .Storage }}
	S3AccessKey   string
	S3SecretKey   string
	S3EndpointURL string
	S3Region      string
	S3Bucket      string
	{{- end }}

	{{- if .Redis }}
	RedisAddr     string
	RedisPassword string
	RedisDB       int
	{{- end }}

	{{- if eq .Queue "sqs" }}
	SQSAccessKey string
	SQSSecretKey string
	SQSRegion    string
	SQSQueueURL  string
	{{- end }}

	{{- if .OAuthGoogle }}
	OAuthGoogleClientID     string
	OAuthGoogleClientSecret string
	OAuthGoogleRedirectURL  string
	{{- end }}

	{{- if .OAuthGitHub }}
	OAuthGitHubClientID     string
	OAuthGitHubClientSecret string
	OAuthGitHubRedirectURL  string
	{{- end }}

	{{- if .OAuthFacebook }}
	OAuthFacebookClientID     string
	OAuthFacebookClientSecret string
	OAuthFacebookRedirectURL  string
	{{- end }}

	{{- if .OAuthInstagram }}
	OAuthInstagramClientID     string
	OAuthInstagramClientSecret string
	OAuthInstagramRedirectURL  string
	{{- end }}

	{{- if .OAuthDiscord }}
	OAuthDiscordClientID     string
	OAuthDiscordClientSecret string
	OAuthDiscordRedirectURL  string
	{{- end }}

	{{- if .OAuthLinkedIn }}
	OAuthLinkedInClientID     string
	OAuthLinkedInClientSecret string
	OAuthLinkedInRedirectURL  string
	{{- end }}

	{{- if .OAuthReddit }}
	OAuthRedditClientID     string
	OAuthRedditClientSecret string
	OAuthRedditRedirectURL  string
	{{- end }}

	{{- if .OAuthTwitch }}
	OAuthTwitchClientID     string
	OAuthTwitchClientSecret string
	OAuthTwitchRedirectURL  string
	{{- end }}

	{{- if .OAuthStripe }}
	OAuthStripeClientID     string
	OAuthStripeClientSecret string
	OAuthStripeRedirectURL  string
	{{- end }}

	{{- if .OAuthX }}
	OAuthXClientID     string
	OAuthXClientSecret string
	OAuthXRedirectURL  string
	{{- end }}

	{{- if .OAuthMicrosoft }}
	OAuthMicrosoftClientID     string
	OAuthMicrosoftClientSecret string
	OAuthMicrosoftRedirectURL  string
	{{- end }}

	{{- if .OAuthSlack }}
	OAuthSlackClientID     string
	OAuthSlackClientSecret string
	OAuthSlackRedirectURL  string
	{{- end }}

	{{- if .OAuthSpotify }}
	OAuthSpotifyClientID     string
	OAuthSpotifyClientSecret string
	OAuthSpotifyRedirectURL  string
	{{- end }}

	{{- if .OIDCGoogle }}
	OIDCGoogleRedirectURL string
	{{- end }}

	{{- if .OIDCMicrosoft }}
	OIDCMicrosoftRedirectURL string
	{{- end }}

	{{- if .OIDCFacebook }}
	OIDCFacebookRedirectURL string
	{{- end }}

	{{- if .OIDCLinkedIn }}
	OIDCLinkedInRedirectURL string
	{{- end }}

	{{- if .OIDCDiscord }}
	OIDCDiscordRedirectURL string
	{{- end }}

	{{- if .OIDCTwitch }}
	OIDCTwitchRedirectURL string
	{{- end }}
}

func Read(fileName string) (*EnvironmentVariables, error) {
	envPath, err := FindFilePath(fileName)
	if err != nil {
		return nil, err
	}

	if err := godotenv.Load(envPath); err != nil {
		return nil, err
	}

	environmentStr := os.Getenv("ENVIRONMENT")
	appEnv := Environment(environmentStr)
	if !appEnv.IsValid() {
		return nil, fmt.Errorf("invalid environment: '%s'", environmentStr)
	}

	port, err := strconv.Atoi(os.Getenv("PORT"))
	if err != nil {
		return nil, err
	}

	{{- if .SMTP }}
	smtpPort, err := strconv.Atoi(os.Getenv("SMTP_PORT"))
	if err != nil {
		return nil, err
	}
	{{- end }}

	{{- if ne .Database.String "none" }}
	migrateDatabase, err := strconv.ParseBool(os.Getenv("MIGRATE_DATABASE"))
	if err != nil {
		return nil, err
	}
	{{- end }}

	{{- if .Redis }}
	redisDB, err := strconv.Atoi(os.Getenv("REDIS_DB"))
	if err != nil {
		return nil, err
	}
	{{- end }}

	env := &EnvironmentVariables{
		Environment: appEnv,
		BaseURL:     os.Getenv("BASE_URL"),
		Port:        port,
		GinMode:     os.Getenv("GIN_MODE"),

		{{- if ne .Database.String "none" }}
		DatabaseConnString: os.Getenv("DATABASE_CONN_STRING"),
		MigrateDatabase:    migrateDatabase,
		{{- end }}

		{{- if .SMTP }}
		SmtpHost:     os.Getenv("SMTP_HOST"),
		SmtpPort:     smtpPort,
		SmtpUsername: os.Getenv("SMTP_USERNAME"),
		SmtpPassword: os.Getenv("SMTP_PASSWORD"),
		SmtpFrom:     os.Getenv("SMTP_FROM"),
		{{- end }}

		{{- if .Storage }}
		S3AccessKey:   os.Getenv("S3_ACCESS_KEY"),
		S3SecretKey:   os.Getenv("S3_SECRET_KEY"),
		S3EndpointURL: os.Getenv("S3_ENDPOINT_URL"),
		S3Region:      os.Getenv("S3_REGION"),
		S3Bucket:      os.Getenv("S3_BUCKET"),
		{{- end }}

		{{- if .Redis }}
		RedisAddr:     os.Getenv("REDIS_ADDR"),
		RedisPassword: os.Getenv("REDIS_PASSWORD"),
		RedisDB:       redisDB,
		{{- end }}

		{{- if eq .Queue "sqs" }}
		SQSAccessKey: os.Getenv("SQS_ACCESS_KEY"),
		SQSSecretKey: os.Getenv("SQS_SECRET_KEY"),
		SQSRegion:    os.Getenv("SQS_REGION"),
		SQSQueueURL:  os.Getenv("SQS_QUEUE_URL"),
		{{- end }}

		{{- if .OAuthGoogle }}
		OAuthGoogleClientID:     GetEnvWithDefault("OAUTH_GOOGLE_CLIENT_ID", ""),
		OAuthGoogleClientSecret: GetEnvWithDefault("OAUTH_GOOGLE_CLIENT_SECRET", ""),
		OAuthGoogleRedirectURL:  GetEnvWithDefault("OAUTH_GOOGLE_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthGitHub }}
		OAuthGitHubClientID:     GetEnvWithDefault("OAUTH_GITHUB_CLIENT_ID", ""),
		OAuthGitHubClientSecret: GetEnvWithDefault("OAUTH_GITHUB_CLIENT_SECRET", ""),
		OAuthGitHubRedirectURL:  GetEnvWithDefault("OAUTH_GITHUB_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthFacebook }}
		OAuthFacebookClientID:     GetEnvWithDefault("OAUTH_FACEBOOK_CLIENT_ID", ""),
		OAuthFacebookClientSecret: GetEnvWithDefault("OAUTH_FACEBOOK_CLIENT_SECRET", ""),
		OAuthFacebookRedirectURL:  GetEnvWithDefault("OAUTH_FACEBOOK_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthInstagram }}
		OAuthInstagramClientID:     GetEnvWithDefault("OAUTH_INSTAGRAM_CLIENT_ID", ""),
		OAuthInstagramClientSecret: GetEnvWithDefault("OAUTH_INSTAGRAM_CLIENT_SECRET", ""),
		OAuthInstagramRedirectURL:  GetEnvWithDefault("OAUTH_INSTAGRAM_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthDiscord }}
		OAuthDiscordClientID:     GetEnvWithDefault("OAUTH_DISCORD_CLIENT_ID", ""),
		OAuthDiscordClientSecret: GetEnvWithDefault("OAUTH_DISCORD_CLIENT_SECRET", ""),
		OAuthDiscordRedirectURL:  GetEnvWithDefault("OAUTH_DISCORD_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthLinkedIn }}
		OAuthLinkedInClientID:     GetEnvWithDefault("OAUTH_LINKEDIN_CLIENT_ID", ""),
		OAuthLinkedInClientSecret: GetEnvWithDefault("OAUTH_LINKEDIN_CLIENT_SECRET", ""),
		OAuthLinkedInRedirectURL:  GetEnvWithDefault("OAUTH_LINKEDIN_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthReddit }}
		OAuthRedditClientID:     GetEnvWithDefault("OAUTH_REDDIT_CLIENT_ID", ""),
		OAuthRedditClientSecret: GetEnvWithDefault("OAUTH_REDDIT_CLIENT_SECRET", ""),
		OAuthRedditRedirectURL:  GetEnvWithDefault("OAUTH_REDDIT_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthTwitch }}
		OAuthTwitchClientID:     GetEnvWithDefault("OAUTH_TWITCH_CLIENT_ID", ""),
		OAuthTwitchClientSecret: GetEnvWithDefault("OAUTH_TWITCH_CLIENT_SECRET", ""),
		OAuthTwitchRedirectURL:  GetEnvWithDefault("OAUTH_TWITCH_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthStripe }}
		OAuthStripeClientID:     GetEnvWithDefault("OAUTH_STRIPE_CLIENT_ID", ""),
		OAuthStripeClientSecret: GetEnvWithDefault("OAUTH_STRIPE_CLIENT_SECRET", ""),
		OAuthStripeRedirectURL:  GetEnvWithDefault("OAUTH_STRIPE_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthX }}
		OAuthXClientID:     GetEnvWithDefault("OAUTH_X_CLIENT_ID", ""),
		OAuthXClientSecret: GetEnvWithDefault("OAUTH_X_CLIENT_SECRET", ""),
		OAuthXRedirectURL:  GetEnvWithDefault("OAUTH_X_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthMicrosoft }}
		OAuthMicrosoftClientID:     GetEnvWithDefault("OAUTH_MICROSOFT_CLIENT_ID", ""),
		OAuthMicrosoftClientSecret: GetEnvWithDefault("OAUTH_MICROSOFT_CLIENT_SECRET", ""),
		OAuthMicrosoftRedirectURL:  GetEnvWithDefault("OAUTH_MICROSOFT_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthSlack }}
		OAuthSlackClientID:     GetEnvWithDefault("OAUTH_SLACK_CLIENT_ID", ""),
		OAuthSlackClientSecret: GetEnvWithDefault("OAUTH_SLACK_CLIENT_SECRET", ""),
		OAuthSlackRedirectURL:  GetEnvWithDefault("OAUTH_SLACK_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OAuthSpotify }}
		OAuthSpotifyClientID:     GetEnvWithDefault("OAUTH_SPOTIFY_CLIENT_ID", ""),
		OAuthSpotifyClientSecret: GetEnvWithDefault("OAUTH_SPOTIFY_CLIENT_SECRET", ""),
		OAuthSpotifyRedirectURL:  GetEnvWithDefault("OAUTH_SPOTIFY_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OIDCGoogle }}
		OIDCGoogleRedirectURL: GetEnvWithDefault("OIDC_GOOGLE_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OIDCMicrosoft }}
		OIDCMicrosoftRedirectURL: GetEnvWithDefault("OIDC_MICROSOFT_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OIDCFacebook }}
		OIDCFacebookRedirectURL: GetEnvWithDefault("OIDC_FACEBOOK_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OIDCLinkedIn }}
		OIDCLinkedInRedirectURL: GetEnvWithDefault("OIDC_LINKEDIN_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OIDCDiscord }}
		OIDCDiscordRedirectURL: GetEnvWithDefault("OIDC_DISCORD_REDIRECT_URL", ""),
		{{- end }}

		{{- if .OIDCTwitch }}
		OIDCTwitchRedirectURL: GetEnvWithDefault("OIDC_TWITCH_REDIRECT_URL", ""),
		{{- end }}
	}

	return env, nil
}

func FindFilePath(fileName string) (string, error) {
	wd, err := os.Getwd()
	if err != nil {
		return "", err
	}

	// Try in current directory
	if _, err := os.Stat(fileName); err == nil {
		return fileName, nil
	}

	// Try in parent directories
	for {
		parentPath := filepath.Dir(wd)
		if parentPath == wd {
			break // Reached the root directory
		}
		wd = parentPath
		filePath := filepath.Join(wd, fileName)
		if _, err := os.Stat(filePath); err == nil {
			return filePath, nil
		}
	}

	return "", errors.New("file not found")
}

// GetEnvWithDefault retrieves an environment variable or returns a default value if not set
func GetEnvWithDefault(key, defaultValue string) string {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue
	}
	return value
}

// GetIntEnvWithDefault retrieves an environment variable as an integer or returns a default value if not set or invalid
func GetIntEnvWithDefault(key string, defaultValue int) int {
	valueStr := os.Getenv(key)
	if valueStr == "" {
		return defaultValue
	}
	value, err := strconv.Atoi(valueStr)
	if err != nil {
		return defaultValue
	}
	return value
}

// GetBoolEnvWithDefault retrieves an environment variable as a boolean or returns a default value if not set or invalid
func GetBoolEnvWithDefault(key string, defaultValue bool) bool {
	valueStr := os.Getenv(key)
	if valueStr == "" {
		return defaultValue
	}
	value, err := strconv.ParseBool(valueStr)
	if err != nil {
		return defaultValue
	}
	return value
}
