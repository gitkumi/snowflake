package env

import (
	"errors"
	"os"
	"path/filepath"
	"strconv"

	"github.com/joho/godotenv"
)

type Environment struct {
	DatabaseConnString string
	Environment        string
	BaseURL            string
	Port               int
	GinMode            string
	MigrateDatabase    bool

	{{- if .SMTP }}
	SmtpHost     string
	SmtpPort     int
	SmtpUsername string
	SmtpPassword string
	SmtpFrom     string
	{{- end }}

	{{- if .Storage }}
	S3AccessKey   string
	S3SecretKey   string
	S3EndpointURL string
	S3Region      string
	S3Bucket      string
	{{- end }}
}

func New(fileName string) (*Environment, error) {
	envPath, err := FindFilePath(fileName)
	if err != nil {
		return nil, err
	}

	if err := godotenv.Load(envPath); err != nil {
		return nil, err
	}

	port, err := strconv.Atoi(os.Getenv("PORT"))
	if err != nil {
		return nil, err
	}

	{{- if .SMTP}}
	smtpPort, err := strconv.Atoi(os.Getenv("SMTP_PORT"))
	{{- end }}

	migrateDatabase, err := strconv.ParseBool(os.Getenv("MIGRATE_DATABASE"))
	if err != nil {
		return nil, err
	}

	env := &Environment{
		DatabaseConnString: os.Getenv("DATABASE_CONN_STRING"),
		Environment:        os.Getenv("ENVIRONMENT"),
		BaseURL:            os.Getenv("BASE_URL"),
		Port:               port,
		GinMode:            os.Getenv("GIN_MODE"),
		MigrateDatabase:    migrateDatabase,

		{{- if .SMTP }}
		SmtpHost:     os.Getenv("SMTP_HOST"),
		SmtpPort:     smtpPort,
		SmtpUsername: os.Getenv("SMTP_USERNAME"),
		SmtpPassword: os.Getenv("SMTP_PASSWORD"),
		SmtpFrom:     os.Getenv("SMTP_FROM"),
		{{- end }}

		{{- if .Storage }}
		S3AccessKey:   os.Getenv("S3_ACCESS_KEY"),
		S3SecretKey:   os.Getenv("S3_SECRET_KEY"),
		S3EndpointURL: os.Getenv("S3_ENDPOINT_URL"),
		S3Region:      os.Getenv("S3_REGION"),
		S3Bucket:      os.Getenv("S3_BUCKET"),
		{{- end }}
	}

	return env, nil
}

func FindFilePath(fileName string) (string, error) {
	dir, err := os.Getwd()
	if err != nil {
		return "", err
	}

	for {
		path := filepath.Join(dir, fileName)
		if _, err := os.Stat(path); err == nil {
			return path, nil
		}

		// If reached the root, stop
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}

	return "", errors.New("could not find " + fileName)
}
