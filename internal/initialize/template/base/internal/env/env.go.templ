package env

import (
	"fmt"
	"errors"
	"os"
	"path/filepath"
	"strconv"

	"github.com/joho/godotenv"
)

type Environment string

const (
	Production  Environment = "production"
	Staging     Environment = "staging"
	Development Environment = "development"
	Test        Environment = "test"
)

var AllEnvironments = []Environment{
	Production,
	Staging,
	Development,
	Test,
}

func (e Environment) IsValid() bool {
	for _, env := range AllEnvironments {
		if e == env {
			return true
		}
	}
	return false
}

type EnvironmentVariables struct {
	Environment Environment
	BaseURL     string
	Port        int
	GinMode     string

	{{- if ne .Database.String "none" }}
	DatabaseConnString string
	MigrateDatabase    bool
	{{- end }}

	{{- if .SMTP }}
	SmtpHost     string
	SmtpPort     int
	SmtpUsername string
	SmtpPassword string
	SmtpFrom     string
	{{- end }}

	{{- if .Storage }}
	S3AccessKey   string
	S3SecretKey   string
	S3EndpointURL string
	S3Region      string
	S3Bucket      string
	{{- end }}

	{{- if .Redis }}
	RedisAddr     string
	RedisPassword string
	RedisDB       int
	{{- end }}

	{{- if .BackgroundJob "sqs" }}
	SQSAccessKey       string
	SQSSecretKey       string
	SQSRegion          string
	SQSQueueURL        string
	{{- end }}
}

func Read(fileName string) (*EnvironmentVariables, error) {
	envPath, err := FindFilePath(fileName)
	if err != nil {
		return nil, err
	}

	if err := godotenv.Load(envPath); err != nil {
		return nil, err
	}

	environmentStr := os.Getenv("ENVIRONMENT")
	appEnv := Environment(environmentStr)
	if !appEnv.IsValid() {
		return nil, fmt.Errorf("invalid environment: '%s'", environmentStr)
	}

	port, err := strconv.Atoi(os.Getenv("PORT"))
	if err != nil {
		return nil, err
	}

	{{- if .SMTP }}
	smtpPort, err := strconv.Atoi(os.Getenv("SMTP_PORT"))
	if err != nil {
		return nil, err
	}
	{{- end }}

	{{- if ne .Database.String "none" }}
	migrateDatabase, err := strconv.ParseBool(os.Getenv("MIGRATE_DATABASE"))
	if err != nil {
		return nil, err
	}
	{{- end }}

	{{- if .Redis }}
	redisDB, err := strconv.Atoi(os.Getenv("REDIS_DB"))
	if err != nil {
		return nil, err
	}
	{{- end }}

	env := &EnvironmentVariables{
		Environment: appEnv,
		BaseURL:     os.Getenv("BASE_URL"),
		Port:        port,
		GinMode:     os.Getenv("GIN_MODE"),

		{{- if ne .Database.String "none" }}
		DatabaseConnString: os.Getenv("DATABASE_CONN_STRING"),
		MigrateDatabase:    migrateDatabase,
		{{- end }}

		{{- if .SMTP }}
		SmtpHost:     os.Getenv("SMTP_HOST"),
		SmtpPort:     smtpPort,
		SmtpUsername: os.Getenv("SMTP_USERNAME"),
		SmtpPassword: os.Getenv("SMTP_PASSWORD"),
		SmtpFrom:     os.Getenv("SMTP_FROM"),
		{{- end }}

		{{- if .Storage }}
		S3AccessKey:   os.Getenv("S3_ACCESS_KEY"),
		S3SecretKey:   os.Getenv("S3_SECRET_KEY"),
		S3EndpointURL: os.Getenv("S3_ENDPOINT_URL"),
		S3Region:      os.Getenv("S3_REGION"),
		S3Bucket:      os.Getenv("S3_BUCKET"),
		{{- end }}

		{{- if .Redis }}
		RedisAddr: os.Getenv("REDIS_ADDR"),
		RedisPassword: os.Getenv("REDIS_PASSWORD"),
		RedisDB: redisDB,
		{{- end }}
	}

	return env, nil
}

func FindFilePath(fileName string) (string, error) {
	dir, err := os.Getwd()
	if err != nil {
		return "", err
	}

	for {
		path := filepath.Join(dir, fileName)
		if _, err := os.Stat(path); err == nil {
			return path, nil
		}

		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}

	return "", errors.New("could not find " + fileName)
}
