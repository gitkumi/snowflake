package env

import (
	"errors"
	"log"
	"os"
	"path/filepath"
	"strconv"

	"github.com/joho/godotenv"
)

type Environment string

const (
	Production  Environment = "production"
	Staging     Environment = "staging"
	Development Environment = "development"
	Test        Environment = "test"
)

var AllEnvironments = []Environment{
	Production,
	Staging,
	Development,
	Test,
}

func (e Environment) IsValid() bool {
	for _, env := range AllEnvironments {
		if e == env {
			return true
		}
	}
	return false
}

func Load(fileName string) error {
	envPath, err := FindFilePath(fileName)
	if err != nil {
		return err
	}

	if err := godotenv.Load(envPath); err != nil {
		return err
	}

	return nil
}

func FindFilePath(fileName string) (string, error) {
	wd, err := os.Getwd()
	if err != nil {
		return "", err
	}

	// Try in current directory
	if _, err := os.Stat(fileName); err == nil {
		return fileName, nil
	}

	// Try in parent directories
	for {
		parentPath := filepath.Dir(wd)
		if parentPath == wd {
			break // Reached the root directory
		}
		wd = parentPath
		filePath := filepath.Join(wd, fileName)
		if _, err := os.Stat(filePath); err == nil {
			return filePath, nil
		}
	}

	return "", errors.New("file not found")
}

func GetEnvWithDefault(key, defaultValue string) string {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue
	}
	return value
}

func GetIntEnvWithDefault(key string, defaultValue int) int {
	valueStr := os.Getenv(key)
	if valueStr == "" {
		return defaultValue
	}
	value, err := strconv.Atoi(valueStr)
	if err != nil {
		return defaultValue
	}
	return value
}

func GetBoolEnvWithDefault(key string, defaultValue bool) bool {
	valueStr := os.Getenv(key)
	if valueStr == "" {
		return defaultValue
	}
	value, err := strconv.ParseBool(valueStr)
	if err != nil {
		return defaultValue
	}
	return value
}

func GetEnvOrThrow(key string) string {
	value := os.Getenv(key)
	if value == "" {
		log.Fatalf("environment variable %q is not set", key)
	}
	return value
}

func GetIntEnvOrThrow(key string) int {
	valueStr := os.Getenv(key)
	if valueStr == "" {
		log.Fatalf("environment variable %q is not set", key)
	}
	value, err := strconv.Atoi(valueStr)
	if err != nil {
		log.Fatalf("invalid integer value for environment variable %q: %v", key, err)
	}
	return value
}

func GetBoolEnvOrThrow(key string) bool {
	valueStr := os.Getenv(key)
	if valueStr == "" {
		log.Fatalf("environment variable %q is not set", key)
	}
	value, err := strconv.ParseBool(valueStr)
	if err != nil {
		log.Fatalf("invalid boolean value for environment variable %q: %v", key, err)
	}
	return value
}
