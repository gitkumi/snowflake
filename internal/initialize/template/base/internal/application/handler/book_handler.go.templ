package handler

import (
	"{{ .Name }}/internal/application/service"
	"{{ .Name }}/internal/dto"
	"{{ .Name }}/internal/repo"
	"database/sql"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

type BookHandler struct {
	Service *service.BookService
}

func NewBookHandler(s *service.BookService) *BookHandler {
	return &BookHandler{Service: s}
}

func (h *BookHandler) ListBook(c *gin.Context) {
	pagination := getPaginationSettings(c)

	books, err := h.Service.ListBook(c, repo.ListBookParams{
	{{- if eq .Database.String "sqlite3" }}
		Limit:  int64(pagination.PerPage),
		Offset: int64(pagination.Offset),
	{{- else }}
		Limit:  int32(pagination.PerPage),
		Offset: int32(pagination.Offset),
	{{- end }}
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	if books == nil {
		books = []repo.Book{}
	}

	resp := make([]dto.BookResponse, len(books))
	for i, book := range books {
		resp[i] = dto.NewBookResponse(book)
	}

	c.JSON(http.StatusOK, gin.H{"data": resp})
}

func (h *BookHandler) CreateBook(c *gin.Context) {
	var input dto.CreateBookInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "error"})
		return
	}

	book, err := h.Service.CreateBook(c, input)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"data": dto.NewBookResponse(book)})
}

func (h *BookHandler) GetBook(c *gin.Context) {
	id, err := strconv.ParseInt(c.Param("id"), 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid book ID"})
		return
	}

	book, err := h.Service.GetBook(c, id)
	if err != nil {
		if err == sql.ErrNoRows {
			c.JSON(http.StatusNotFound, gin.H{"error": "Book not found"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": dto.NewBookResponse(book)})
}

func (h *BookHandler) UpdateBook(c *gin.Context) {
	id, err := strconv.ParseInt(c.Param("id"), 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid book ID"})
		return
	}

	var input dto.UpdateBookInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	book, err := h.Service.UpdateBook(c, input, id)
	if err != nil {
		if err == sql.ErrNoRows {
			c.JSON(http.StatusNotFound, gin.H{"error": "Book not found"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": dto.NewBookResponse(book)})
}

func (h *BookHandler) DeleteBook(c *gin.Context) {
	id, err := strconv.ParseInt(c.Param("id"), 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid book ID"})
		return
	}

	err = h.Service.DeleteBook(c, id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.Status(http.StatusOK)
}
