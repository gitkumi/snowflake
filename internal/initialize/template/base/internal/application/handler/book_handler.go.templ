package handler

import (
	"{{ .Name}}/internal/application/service"
	"{{ .Name}}/internal/repo"
	"database/sql"
	"net/http"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
)

type BookHandler struct {
	Service *service.BookService
}

func NewBookHandler(s *service.BookService) *BookHandler {
	return &BookHandler{Service: s}
}

type CreateBookInput struct {
	Title         string           `json:"title" binding:"required"`
	Author        string           `json:"author"`
	ISBN          string           `json:"isbn"`
	Genre         string           `json:"genre"`
}

var customMessages = map[string]string{
	"Title.required": "Title is required.",
}

type UpdateBookInput struct {
	Title         string `json:"title"`
	Author        string `json:"author"`
	ISBN          string `json:"isbn"`
	Genre         string `json:"genre"`
}

type BookResponse struct {
	Title     string `json:"title"`
	Author    string `json:"author,omitempty"`
	Isbn      string `json:"isbn,omitempty"`
	Genre     string `json:"genre,omitempty"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

func (h *BookHandler) ListBook(c *gin.Context) {
	pagination := getPaginationSettings(c)

	books, err := h.Service.ListBook(c, repo.ListBookParams{
		{{- if eq .Database.String "sqlite3" }}
			Limit:  int64(pagination.PerPage),
			Offset: int64(pagination.Offset),
		{{- else }}
			Limit:  int32(pagination.PerPage),
			Offset: int32(pagination.Offset),
		{{- end }}
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	if books == nil {
		books = []repo.Book{}
	}

	resp := make([]BookResponse, len(books))
	for i, book := range books {
		resp[i] = BookResponse{
			Title:     book.Title,
			Author:    renderNullString(book.Author),
			Isbn:      renderNullString(book.Isbn),
			Genre:     renderNullString(book.Genre),
			CreatedAt: book.CreatedAt.Format(time.RFC3339),
			UpdatedAt: book.UpdatedAt.Format(time.RFC3339),
		}
	}

	c.JSON(http.StatusOK, gin.H{"data": books})
}

func (h *BookHandler) CreateBook(c *gin.Context) {
	var input CreateBookInput
	if err := c.ShouldBindJSON(&input); err != nil {
		errs := extractValidationErrors(err, customMessages)
		if len(errs) > 0 {
			c.JSON(http.StatusBadRequest, gin.H{"errors": errs})
			return
		}

		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	author := sql.NullString{String: input.Author, Valid: input.Author != ""}
	isbn := sql.NullString{String: input.ISBN, Valid: input.ISBN != ""}
	genre := sql.NullString{String: input.Genre, Valid: input.Genre != ""}

	book, err := h.Service.CreateBook(c, input.Title, author, isbn, genre)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"data": book})
}

func (h *BookHandler) GetBook(c *gin.Context) {
	id, err := strconv.ParseInt(c.Param("id"), 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid book ID"})
		return
	}

	book, err := h.Service.GetBook(c, id)
	if err != nil {
		if err == sql.ErrNoRows {
			c.JSON(http.StatusNotFound, gin.H{"error": "Book not found"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": book})
}

func (h *BookHandler) UpdateBook(c *gin.Context) {
	id, err := strconv.ParseInt(c.Param("id"), 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid book ID"})
		return
	}

	var input UpdateBookInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	author := sql.NullString{String: input.Author, Valid: input.Author != ""}
	isbn := sql.NullString{String: input.ISBN, Valid: input.ISBN != ""}
	genre := sql.NullString{String: input.Genre, Valid: input.Genre != ""}

	book, err := h.Service.UpdateBook(c, id, input.Title, author, isbn, genre)
	if err != nil {
		if err == sql.ErrNoRows {
			c.JSON(http.StatusNotFound, gin.H{"error": "Book not found"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": book})
}

func (h *BookHandler) DeleteBook(c *gin.Context) {
	id, err := strconv.ParseInt(c.Param("id"), 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid book ID"})
		return
	}

	err = h.Service.DeleteBook(c, id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.Status(http.StatusOK)
}
