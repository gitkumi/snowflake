package service

import (
	"{{ .Name }}/internal/dto"
	"{{ .Name }}/internal/repo"
	"context"
)

type BookService struct {
	Query *repo.Queries
}

func NewBookService(q *repo.Queries) *BookService {
	return &BookService{Query: q}
}

func (s *BookService) CreateBook(ctx context.Context, input dto.CreateBook) (repo.Book, error) {
	{{- if eq .Database.String "mysql"}}
	result, err := s.Query.CreateBook(ctx, input.Repo())
	if err != nil {
		return repo.Book{}, err
	}

	id, err := result.LastInsertId()
	if err != nil {
		return repo.Book{}, err
	}

	return s.Query.GetBook(ctx, id)
	{{ else }}
	return s.Query.CreateBook(ctx, input.Repo())
	{{- end }}
}

func (s *BookService) UpdateBook(ctx context.Context, input dto.UpdateBook, id int64) (repo.Book, error) {
	{{- if eq .Database.String "mysql"}}
	err := s.Query.UpdateBook(ctx, input.Repo(id))
	if err != nil {
		return repo.Book{}, err
	}

	return s.Query.GetBook(ctx, id)
	{{- else }}
	return s.Query.UpdateBook(ctx, input.Repo(id))
	{{- end }}
}

func (s *BookService) DeleteBook(ctx context.Context, id int64) error {
	return s.Query.DeleteBook(ctx, id)
}

func (s *BookService) GetBook(ctx context.Context, id int64) (repo.Book, error) {
	return s.Query.GetBook(ctx, id)
}

func (s *BookService) ListBook(ctx context.Context, arg repo.ListBookParams) ([]repo.Book, error) {
	return s.Query.ListBook(ctx, arg)
}
