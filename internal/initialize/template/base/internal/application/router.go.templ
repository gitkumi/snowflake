package application

import (
	{{- if .Redis }}
	"fmt"
	"github.com/redis/go-redis/v9"
	{{- end }}
	"{{ .Name }}/internal/env"
	"{{ .Name }}/internal/middleware"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
)

type RouterConfig struct {
	GinMode string
}

func NewRouter(cfg *RouterConfig) *gin.Engine {
	gin.SetMode(cfg.GinMode)

	router := gin.Default()
	router.Use(cors.Default())

	return router
}

{{- if .Redis }}
func (app *Application) registerRoutes(redis *redis.Client) error {
	rateLimit, err := middleware.RateLimitMiddleware(redis)
	if err != nil {
		return fmt.Errorf("failed to init rate limit middleware: %v", err)
	}
{{- else }}
func (app *Application) registerRoutes() error {
{{- end }}
	if app.Environment == env.Production {
		{{- if .Redis }}
		app.Router.Use(rateLimit)
		{{- end }}
		app.Router.Use(middleware.LoggingMiddleware(app.Logger))
	}
	{{- if eq .AppType "web"}}
	app.Router.GET("/", app.handlers.html.TopPage)

	{{- end }}
	api := app.Router.Group("/api")
	api.GET("/health", app.handlers.health.Health)
	{{- if ne .Database.String "none" }}
	api.GET("/books", app.handlers.book.ListBook)
	api.GET("/books/:id", app.handlers.book.GetBook)
	api.POST("/books", app.handlers.book.CreateBook)
	api.PATCH("/books/:id", app.handlers.book.UpdateBook)
	api.DELETE("/books/:id", app.handlers.book.DeleteBook)
		{{- if and .SMTP .WithAuth }}
	api.POST("/auth/register", app.handlers.auth.Register)
	api.POST("/auth/login", app.handlers.auth.Login)
	api.POST("/auth/email-login", app.handlers.auth.CreateMagicLink)
	api.POST("/auth/email-login/:token", app.handlers.auth.ConsumeMagicLink)
	api.POST("/auth/confirm-email", app.handlers.auth.CreateConfirmEmail)
	api.POST("/auth/confirm-email/:token", app.handlers.auth.ConsumeConfirmEmail)
	api.POST("/auth/reset-password", app.handlers.auth.CreateResetPassword)
	api.POST("/auth/reset-password/:token", app.handlers.auth.ConsumeResetPassword)
		{{- end }}
	{{- end }}
	

	{{- if .OAuthGoogle }}
	api.GET("/oauth/google/callback", app.handlers.oauth.GoogleCallback)
	api.GET("/oauth/google", app.handlers.oauth.GoogleLogin)
	{{- end }}
	{{- if .OAuthFacebook }}
	api.GET("/oauth/facebook", app.handlers.oauth.FacebookLogin)
	api.GET("/oauth/facebook/callback", app.handlers.oauth.FacebookCallback)
	{{- end }}
	{{- if .OAuthGitHub }}
	api.GET("/oauth/github", app.handlers.oauth.GitHubLogin)
	api.GET("/oauth/github/callback", app.handlers.oauth.GitHubCallback)
	{{- end }}
	{{- if .OAuthLinkedIn }}
	api.GET("/oauth/linkedin", app.handlers.oauth.LinkedInLogin)
	api.GET("/oauth/linkedin/callback", app.handlers.oauth.LinkedInCallback)
	{{- end }}
	{{- if .OAuthInstagram }}
	api.GET("/oauth/instagram", app.handlers.oauth.InstagramLogin)
	api.GET("/oauth/instagram/callback", app.handlers.oauth.InstagramCallback)
	{{- end }}
	{{- if .OAuthDiscord }}
	api.GET("/oauth/discord", app.handlers.oauth.DiscordLogin)
	api.GET("/oauth/discord/callback", app.handlers.oauth.DiscordCallback)
	{{- end }}

	return nil
}


