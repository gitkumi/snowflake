package auth

import (
	"crypto/rand"
	"encoding/base64"
	"errors"
	"fmt"
	"time"

	"github.com/golang-jwt/jwt/v5"
)

var (
	ErrInvalidToken    = errors.New("jwt: invalid token")
	ErrExpiredToken    = errors.New("jwt: token expired")
	ErrInvalidClaims   = errors.New("jwt: invalid claims")
	ErrTokenGeneration = errors.New("jwt: token generation failed")
	ErrWeakSecret      = errors.New("jwt: secret must be at least 32 bytes (256 bits)")
)

const MinSecretLength = 32

type StateClaims struct {
	Provider     string `json:"provider"`
	RedirectURL  string `json:"redirect_url"`
	PKCEVerifier string `json:"pkce_verifier,omitempty"`
	Nonce        string `json:"nonce,omitempty"`
	jwt.RegisteredClaims
}

type SessionClaims struct {
	Provider      string         `json:"provider"`
	AccessToken   string         `json:"access_token"`
	RefreshToken  string         `json:"refresh_token,omitempty"`
	UserInfo      map[string]any `json:"user_info"`
	IDToken       string         `json:"id_token,omitempty"`
	IDTokenClaims map[string]any `json:"id_token_claims,omitempty"`
	jwt.RegisteredClaims
}

type JWTManager struct {
	secret []byte
}

func NewJWTManager(secret string) (*JWTManager, error) {
	if len(secret) < MinSecretLength {
		return nil, ErrWeakSecret
	}
	return &JWTManager{
		secret: []byte(secret),
	}, nil
}

func GenerateRandomToken() (string, error) {
	b := make([]byte, 32)
	if _, err := rand.Read(b); err != nil {
		return "", fmt.Errorf("failed to generate random token: %w", err)
	}
	return base64.URLEncoding.EncodeToString(b), nil
}

func (m *JWTManager) GenerateStateToken(provider, redirectURL, pkceVerifier, nonce string, ttl time.Duration) (string, error) {
	now := time.Now()

	claims := &StateClaims{
		Provider:     provider,
		RedirectURL:  redirectURL,
		PKCEVerifier: pkceVerifier,
		Nonce:        nonce,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(now.Add(ttl)),
			IssuedAt:  jwt.NewNumericDate(now),
			NotBefore: jwt.NewNumericDate(now),
			Subject:   "oauth_state",
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	signedToken, err := token.SignedString(m.secret)
	if err != nil {
		return "", fmt.Errorf("%w: %v", ErrTokenGeneration, err)
	}

	return signedToken, nil
}

func (m *JWTManager) ValidateStateToken(tokenString string) (*StateClaims, error) {
	token, err := jwt.ParseWithClaims(tokenString, &StateClaims{}, func(token *jwt.Token) (any, error) {
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
		}
		return m.secret, nil
	})

	if err != nil {
		if errors.Is(err, jwt.ErrTokenExpired) {
			return nil, ErrExpiredToken
		}
		return nil, fmt.Errorf("%w: %v", ErrInvalidToken, err)
	}

	claims, ok := token.Claims.(*StateClaims)
	if !ok || !token.Valid {
		return nil, ErrInvalidClaims
	}

	return claims, nil
}

func (m *JWTManager) GenerateSessionToken(provider, accessToken, refreshToken string, userInfo map[string]any, idToken string, idTokenClaims map[string]any, ttl time.Duration) (string, error) {
	now := time.Now()

	claims := &SessionClaims{
		Provider:      provider,
		AccessToken:   accessToken,
		RefreshToken:  refreshToken,
		UserInfo:      userInfo,
		IDToken:       idToken,
		IDTokenClaims: idTokenClaims,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(now.Add(ttl)),
			IssuedAt:  jwt.NewNumericDate(now),
			NotBefore: jwt.NewNumericDate(now),
			Subject:   "session",
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	signedToken, err := token.SignedString(m.secret)
	if err != nil {
		return "", fmt.Errorf("%w: %v", ErrTokenGeneration, err)
	}

	return signedToken, nil
}

func (m *JWTManager) ValidateSessionToken(tokenString string) (*SessionClaims, error) {
	token, err := jwt.ParseWithClaims(tokenString, &SessionClaims{}, func(token *jwt.Token) (any, error) {
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
		}
		return m.secret, nil
	})

	if err != nil {
		if errors.Is(err, jwt.ErrTokenExpired) {
			return nil, ErrExpiredToken
		}
		return nil, fmt.Errorf("%w: %v", ErrInvalidToken, err)
	}

	claims, ok := token.Claims.(*SessionClaims)
	if !ok || !token.Valid {
		return nil, ErrInvalidClaims
	}

	return claims, nil
}