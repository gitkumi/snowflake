package oidc

import (
	"context"
	"fmt"
	"strings"

	"{{ .Name }}/internal/auth/oauth"

	oidclib "github.com/coreos/go-oidc/v3/oidc"
)

const MicrosoftIssuerPrefix = "https://login.microsoftonline.com/"

func NewMicrosoftProvider(oauthProvider *oauth.Provider, clientID string) *Provider {
	return NewProvider(oauthProvider, "", clientID, nil).WithCustomVerify(
		func(ctx context.Context, idToken string, clientID string) (*IDTokenClaims, error) {
			claims, err := ParseIDToken(idToken)
			if err != nil {
				return nil, err
			}

			if !strings.HasPrefix(claims.Issuer, MicrosoftIssuerPrefix) {
				return nil, ErrInvalidIssuer
			}

			provider, err := getOrCreateOIDCProvider(ctx, claims.Issuer)
			if err != nil {
				return nil, fmt.Errorf("failed to get OIDC provider: %w", err)
			}

			verifier := provider.Verifier(&oidclib.Config{ClientID: clientID})

			idTokenVerified, err := verifier.Verify(ctx, idToken)
			if err != nil {
				return nil, fmt.Errorf("failed to verify ID token signature: %w", err)
			}

			if err := ValidateBasicClaims(claims, "", clientID, ""); err != nil {
				return nil, err
			}

			if idTokenVerified.Subject != claims.Subject {
				return nil, ErrInvalidToken
			}

			return claims, nil
		},
	)
}
