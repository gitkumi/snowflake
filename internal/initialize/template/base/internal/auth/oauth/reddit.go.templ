package oauth

import (
	"context"
	"net/http"
	"strings"

	"golang.org/x/oauth2"
)

var RedditEndpoint = oauth2.Endpoint{
	AuthURL:   "https://www.reddit.com/api/v1/authorize",
	TokenURL:  "https://www.reddit.com/api/v1/access_token",
	AuthStyle: oauth2.AuthStyleInParams,
}

const RedditUserInfoURL = "https://oauth.reddit.com/api/v1/me"

type redditTransport struct {
	base http.RoundTripper
}

func (t *redditTransport) RoundTrip(req *http.Request) (*http.Response, error) {
	req.Header.Set("User-Agent", "AuthApplication/1.0")
	return t.base.RoundTrip(req)
}

func NewRedditProvider(config *oauth2.Config) *Provider {
	config.Endpoint = RedditEndpoint
	providerConfig := ProviderConfig{
		RequirePKCE: false,
		Scopes:      []string{"identity"},
	}
	return NewProvider(
		"reddit",
		config,
		fetchRedditUserInfo,
		providerConfig,
		oauth2.SetAuthURLParam("duration", "permanent"),
	)
}

type RedditUserInfo struct {
	ID       string  `json:"id"`
	Name     string  `json:"name"`
	IconURL  string  `json:"icon_url"`
	Created  float64 `json:"created"`
	Verified bool    `json:"verified"`
	Provider string  `json:"provider"`
}

func fetchRedditUserInfo(ctx context.Context, config *oauth2.Config, token *oauth2.Token) (any, error) {
	ctx = context.WithValue(ctx, oauth2.HTTPClient, &http.Client{
		Transport: &redditTransport{base: http.DefaultTransport},
	})

	var resp struct {
		ID       string  `json:"id"`
		Name     string  `json:"name"`
		IconImg  string  `json:"icon_img"`
		Created  float64 `json:"created"`
		Verified bool    `json:"verified"`
	}

	if err := FetchUserInfo(ctx, config, token, RedditUserInfoURL, &resp); err != nil {
		return nil, err
	}

	iconURL := resp.IconImg
	if strings.Contains(iconURL, "?") {
		iconURL = strings.Split(iconURL, "?")[0]
	}

	return &RedditUserInfo{
		ID:       resp.ID,
		Name:     resp.Name,
		IconURL:  iconURL,
		Created:  resp.Created,
		Verified: resp.Verified,
		Provider: "reddit",
	}, nil
}
