package oauth

import (
	"context"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/spotify"
)

const SpotifyUserInfoURL = "https://api.spotify.com/v1/me"

func NewSpotifyProvider(config *oauth2.Config) *Provider {
	config.Endpoint = spotify.Endpoint
	providerConfig := ProviderConfig{
		RequirePKCE: false,
		Scopes:      []string{"user-read-email"},
	}
	return NewProvider(
		"spotify",
		config,
		fetchSpotifyUserInfo,
		providerConfig,
		oauth2.SetAuthURLParam("show_dialog", "true"),
	)
}

type SpotifyUserInfo struct {
	ID            string `json:"id"`
	Email         string `json:"email"`
	EmailVerified bool   `json:"email_verified"`
	DisplayName   string `json:"display_name"`
	PictureURL    string `json:"picture_url"`
	Country       string `json:"country"`
	Provider      string `json:"provider"`
}

func fetchSpotifyUserInfo(ctx context.Context, config *oauth2.Config, token *oauth2.Token) (any, error) {
	var resp struct {
		ID          string `json:"id"`
		Email       string `json:"email"`
		DisplayName string `json:"display_name"`
		Images      []struct {
			URL string `json:"url"`
		} `json:"images"`
		Country string `json:"country"`
	}

	if err := FetchUserInfo(ctx, config, token, SpotifyUserInfoURL, &resp); err != nil {
		return nil, err
	}

	picture := ""
	if len(resp.Images) > 0 {
		picture = resp.Images[0].URL
	}

	return &SpotifyUserInfo{
		ID:            resp.ID,
		Email:         resp.Email,
		EmailVerified: resp.Email != "",
		DisplayName:   resp.DisplayName,
		PictureURL:    picture,
		Country:       resp.Country,
		Provider:      "spotify",
	}, nil
}
