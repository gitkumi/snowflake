package oauth

import (
	"context"
	"fmt"
	"net/http"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/twitch"
)

const TwitchUserInfoURL = "https://api.twitch.tv/helix/users"

type twitchTransport struct {
	base     http.RoundTripper
	clientID string
}

func (t *twitchTransport) RoundTrip(req *http.Request) (*http.Response, error) {
	req.Header.Set("Client-ID", t.clientID)
	return t.base.RoundTrip(req)
}

func NewTwitchProvider(config *oauth2.Config) *Provider {
	config.Endpoint = twitch.Endpoint
	providerConfig := ProviderConfig{
		RequirePKCE: false,
		Scopes:      []string{"user:read:email"},
	}
	return NewProvider(
		"twitch",
		config,
		fetchTwitchUserInfo,
		providerConfig,
		oauth2.SetAuthURLParam("force_verify", "true"),
	)
}

type TwitchUserInfo struct {
	ID              string `json:"id"`
	Login           string `json:"login"`
	DisplayName     string `json:"display_name"`
	Email           string `json:"email"`
	EmailVerified   bool   `json:"email_verified"`
	ProfileImageURL string `json:"profile_image_url"`
	Provider        string `json:"provider"`
}

func fetchTwitchUserInfo(ctx context.Context, config *oauth2.Config, token *oauth2.Token) (any, error) {
	ctx = context.WithValue(ctx, oauth2.HTTPClient, &http.Client{
		Transport: &twitchTransport{
			base:     http.DefaultTransport,
			clientID: config.ClientID,
		},
	})

	var resp struct {
		Data []struct {
			ID              string `json:"id"`
			Login           string `json:"login"`
			DisplayName     string `json:"display_name"`
			Email           string `json:"email"`
			ProfileImageURL string `json:"profile_image_url"`
		} `json:"data"`
	}

	if err := FetchUserInfo(ctx, config, token, TwitchUserInfoURL, &resp); err != nil {
		return nil, err
	}

	if len(resp.Data) == 0 {
		return nil, fmt.Errorf("no user data returned from Twitch API")
	}

	user := resp.Data[0]

	return &TwitchUserInfo{
		ID:              user.ID,
		Login:           user.Login,
		DisplayName:     user.DisplayName,
		Email:           user.Email,
		EmailVerified:   true,
		ProfileImageURL: user.ProfileImageURL,
		Provider:        "twitch",
	}, nil
}
