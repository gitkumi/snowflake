package oauth

import (
	"context"
	"fmt"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/github"
)

const (
	GitHubUserInfoURL = "https://api.github.com/user"
	GitHubEmailURL    = "https://api.github.com/user/emails"
)

func NewGitHubProvider(config *oauth2.Config) *Provider {
	config.Endpoint = github.Endpoint
	providerConfig := ProviderConfig{
		RequirePKCE: false,
		Scopes:      []string{"user:email"},
	}
	return NewProvider("github", config, fetchGitHubUserInfo, providerConfig)
}

type GitHubUserInfo struct {
	ID            string `json:"id"`
	Login         string `json:"login"`
	Email         string `json:"email"`
	EmailVerified bool   `json:"email_verified"`
	Name          string `json:"name"`
	AvatarURL     string `json:"avatar_url"`
	Provider      string `json:"provider"`
}

func fetchGitHubUserInfo(ctx context.Context, config *oauth2.Config, token *oauth2.Token) (any, error) {
	var userResp struct {
		ID        int    `json:"id"`
		Login     string `json:"login"`
		Name      string `json:"name"`
		Email     string `json:"email"`
		AvatarURL string `json:"avatar_url"`
	}

	if err := FetchUserInfo(ctx, config, token, GitHubUserInfoURL, &userResp); err != nil {
		return nil, err
	}

	userInfo := &GitHubUserInfo{
		ID:            fmt.Sprintf("%d", userResp.ID),
		Login:         userResp.Login,
		Email:         userResp.Email,
		Name:          userResp.Name,
		AvatarURL:     userResp.AvatarURL,
		Provider:      "github",
		EmailVerified: false,
	}

	if userInfo.Email == "" {
		if err := enrichGitHubUserInfoWithEmail(ctx, config, token, userInfo); err != nil {
			return nil, err
		}
	}

	return userInfo, nil
}

func enrichGitHubUserInfoWithEmail(ctx context.Context, config *oauth2.Config, token *oauth2.Token, userInfo *GitHubUserInfo) error {
	var emails []struct {
		Email    string `json:"email"`
		Primary  bool   `json:"primary"`
		Verified bool   `json:"verified"`
	}

	if err := FetchUserInfo(ctx, config, token, GitHubEmailURL, &emails); err != nil {
		return err
	}

	for _, email := range emails {
		if email.Primary && email.Verified {
			userInfo.Email = email.Email
			userInfo.EmailVerified = true
			return nil
		}
	}

	for _, email := range emails {
		if email.Verified {
			userInfo.Email = email.Email
			userInfo.EmailVerified = true
			return nil
		}
	}

	return nil
}