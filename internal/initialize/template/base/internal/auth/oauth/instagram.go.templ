package oauth

import (
	"context"
	"fmt"

	"golang.org/x/oauth2"
)

var InstagramEndpoint = oauth2.Endpoint{
	AuthURL:  "https://api.instagram.com/oauth/authorize",
	TokenURL: "https://api.instagram.com/oauth/access_token",
}

const InstagramUserInfoURL = "https://graph.instagram.com/me"

func NewInstagramProvider(config *oauth2.Config) *Provider {
	config.Endpoint = InstagramEndpoint
	providerConfig := ProviderConfig{
		RequirePKCE: false,
		Scopes:      []string{"user_profile"},
	}
	return NewProvider("instagram", config, fetchInstagramUserInfo, providerConfig)
}

type InstagramUserInfo struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Provider string `json:"provider"`
}

func fetchInstagramUserInfo(ctx context.Context, config *oauth2.Config, token *oauth2.Token) (any, error) {
	url := fmt.Sprintf("%s?fields=id,username", InstagramUserInfoURL)

	var resp struct {
		ID       string `json:"id"`
		Username string `json:"username"`
	}

	if err := FetchUserInfo(ctx, config, token, url, &resp); err != nil {
		return nil, err
	}

	return &InstagramUserInfo{
		ID:       resp.ID,
		Username: resp.Username,
		Provider: "instagram",
	}, nil
}
