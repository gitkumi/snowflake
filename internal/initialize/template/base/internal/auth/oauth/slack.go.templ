package oauth

import (
	"context"
	"fmt"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/slack"
)

const SlackUserInfoURL = "https://slack.com/api/users.identity"

func NewSlackProvider(config *oauth2.Config) *Provider {
	config.Endpoint = slack.Endpoint
	providerConfig := ProviderConfig{
		RequirePKCE: false,
		Scopes:      []string{"identity.basic", "identity.email", "identity.avatar"},
	}
	return NewProvider(
		"slack",
		config,
		fetchSlackUserInfo,
		providerConfig,
		oauth2.SetAuthURLParam("user_scope", "identity.basic,identity.email,identity.avatar"),
	)
}

type SlackUserInfo struct {
	ID            string `json:"id"`
	Name          string `json:"name"`
	Email         string `json:"email"`
	EmailVerified bool   `json:"email_verified"`
	PictureURL    string `json:"picture_url"`
	Provider      string `json:"provider"`
}

func fetchSlackUserInfo(ctx context.Context, config *oauth2.Config, token *oauth2.Token) (any, error) {
	var resp struct {
		OK    bool   `json:"ok"`
		Error string `json:"error,omitempty"`
		User  struct {
			ID       string `json:"id"`
			Name     string `json:"name"`
			Email    string `json:"email"`
			Image192 string `json:"image_192"`
			Image512 string `json:"image_512"`
		} `json:"user"`
	}

	if err := FetchUserInfo(ctx, config, token, SlackUserInfoURL, &resp); err != nil {
		return nil, err
	}

	if !resp.OK {
		return nil, fmt.Errorf("slack user info error: %s", resp.Error)
	}

	picture := resp.User.Image512
	if picture == "" {
		picture = resp.User.Image192
	}

	return &SlackUserInfo{
		ID:            resp.User.ID,
		Name:          resp.User.Name,
		Email:         resp.User.Email,
		EmailVerified: true,
		PictureURL:    picture,
		Provider:      "slack",
	}, nil
}
