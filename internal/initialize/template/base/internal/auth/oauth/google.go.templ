package oauth

import (
	"context"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
)

const GoogleUserInfoURL = "https://www.googleapis.com/oauth2/v3/userinfo"

func NewGoogleProvider(config *oauth2.Config) *Provider {
	config.Endpoint = google.Endpoint
	providerConfig := ProviderConfig{
		RequirePKCE: false,
		Scopes:      []string{"openid", "email", "profile"},
	}
	return NewProvider(
		"google",
		config,
		fetchGoogleUserInfo,
		providerConfig,
		oauth2.AccessTypeOffline,
		oauth2.ApprovalForce,
	)
}

type GoogleUserInfo struct {
	ID            string `json:"id"`
	Email         string `json:"email"`
	EmailVerified bool   `json:"email_verified"`
	Name          string `json:"name"`
	GivenName     string `json:"given_name"`
	FamilyName    string `json:"family_name"`
	Picture       string `json:"picture"`
	Locale        string `json:"locale"`
	Provider      string `json:"provider"`
}

func fetchGoogleUserInfo(ctx context.Context, config *oauth2.Config, token *oauth2.Token) (any, error) {
	var resp struct {
		Sub           string `json:"sub"`
		Email         string `json:"email"`
		EmailVerified bool   `json:"email_verified"`
		Name          string `json:"name"`
		GivenName     string `json:"given_name"`
		FamilyName    string `json:"family_name"`
		Picture       string `json:"picture"`
		Locale        string `json:"locale"`
	}

	if err := FetchUserInfo(ctx, config, token, GoogleUserInfoURL, &resp); err != nil {
		return nil, err
	}

	return &GoogleUserInfo{
		ID:            resp.Sub,
		Email:         resp.Email,
		EmailVerified: resp.EmailVerified,
		Name:          resp.Name,
		GivenName:     resp.GivenName,
		FamilyName:    resp.FamilyName,
		Picture:       resp.Picture,
		Locale:        resp.Locale,
		Provider:      "google",
	}, nil
}