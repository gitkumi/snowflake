package test

import (
	"{{ .Name }}/internal/application"
	"{{ .Name }}/internal/env"
	"log"
	"log/slog"
	"os"

	"github.com/lmittmann/tint"
{{- if ne .Database.String "none"}}
	"{{ .Name }}/internal/repo"
	_ "{{ .Database.Import }}"
	{{- if eq .Database.String "sqlite3" }}
	"path/filepath"
	{{- end }}
{{- end }}
{{- if .SMTP }}
	"{{ .Name }}/internal/smtp"
{{- end }}
{{- if .Storage }}
	"{{ .Name }}/internal/storage"
{{- end }}
{{- if .Redis }}
	"github.com/redis/go-redis/v9"
{{- end }}
{{- if eq .Queue "sqs" }}
	"{{ .Name }}/internal/queue"
{{- end }}
)

type TestApplication struct {
	Application *application.Application
	{{- if ne .Database.String "none" }}
	Query       *repo.Queries
	{{- end }}
}

func Init() (*TestApplication, error) {
	vars, err := env.Read(".env.test")
	if err != nil {
		log.Fatal("failed to read environment variables", err)
	}

	router := application.NewRouter(&application.RouterConfig{
		GinMode: vars.GinMode,
	})

	{{- if ne .Database.String "none" }}
	dbConnString := vars.DatabaseConnString
	{{- if eq .Database.String "sqlite3" }}
	rootPath, err := env.FindFilePath("go.mod")
	if err != nil {
		log.Fatal("failed to find go.mod", err)
	}
	dbConnString = filepath.Join(rootPath, "..", vars.DatabaseConnString)
	{{- end }}
	
	db, err := application.NewDB(&application.DBConfig{
		DatabaseConnString: dbConnString,
		MigrateDatabase:    vars.MigrateDatabase,
	})
	if err != nil {
		log.Fatal("failed to create DB", err)
	}
	{{- end }}

	{{- if .SMTP }}
	mailer := smtp.NewMockMailer()
	{{- end }}

	{{- if .Storage }}
	storage := storage.NewMockStorage()
	{{- end }}

	{{- if .Redis }}
	rdb := redis.NewClient(&redis.Options{
		Addr:     vars.RedisAddr,
		Password: vars.RedisPassword,
		DB:       vars.RedisDB,
	})
	{{- end }}

	{{- if eq .Queue "sqs" }}
	sqs := queue.NewMockQueue()
	{{- end }}

	app, err := application.New(&application.Config{
		Environment: vars.Environment,
		BaseURL:     vars.BaseURL,
		Port:        vars.Port,
		Router:      router,
		Logger:      slog.New(tint.NewHandler(os.Stdout, &tint.Options{Level: slog.LevelDebug})),
		{{- if ne .Database.String "none" }}
		DB:          db,
		{{- end }}
		{{- if .SMTP }}
		Mailer:      mailer,
		{{- end }}
		{{- if .Storage }}
		Storage:     storage,
		{{- end }}
		{{- if .Redis }}
		Redis:       rdb,
		{{- end }}
		{{- if eq .Queue "sqs" }}
		Queue:       sqs,
		{{- end }}
	})
	if err != nil {
		log.Fatal("failed to create application", err)
	}

	{{- if ne .Database.String "none" }}
	query := repo.New(db)
	{{- end }}

	return &TestApplication{
		Application: app,
		{{- if ne .Database.String "none" }}
		Query:       query,
		{{- end }}
	}, nil
}
