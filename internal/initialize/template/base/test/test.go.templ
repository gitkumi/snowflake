package test

import (
	"{{ .Name }}/internal/application"
	"{{ .Name }}/internal/env"
	{{- if .WithOAuth }}
	"{{ .Name }}/internal/oauth"
	{{- end }}
	{{- if ne .Database.String "none"}}
	"{{ .Name }}/internal/repo"
	{{- end }}
	{{- if .SMTP }}
	"{{ .Name }}/internal/smtp"
	{{- end }}
	{{- if .Storage }}
	"{{ .Name }}/internal/storage"
	{{- end }}
	{{- if eq .Database.String "sqlite3" }}
	"path/filepath"
	{{- end }}
	"log"
	"log/slog"
	"os"

	"github.com/lmittmann/tint"
	{{- if ne .Database.String "none" }}
	_ "{{ .Database.Import }}"
	{{- end }}
	{{- if .Redis }}
	"github.com/redis/go-redis/v9"
	{{- end }}
	{{- if eq .BackgroundJob "sqs" }}
	"acme/internal/queue"
	{{- end }}
)

type TestApplication struct {
	Application *application.Application
	{{- if ne .Database.String "none" }}
	Query       *repo.Queries
	{{- end }}
}

func Init() (*TestApplication, error) {
	{{- if eq .Database.String "sqlite3" }}
	rootPath, err := env.FindFilePath("go.mod")
	if err != nil {
		log.Fatal("failed to read environment variables", err)
	}
	{{- end }}

	vars, err := env.Read(".env.test")
	if err != nil {
		log.Fatal("failed to read environment variables", err)
	}

	logger := slog.New(tint.NewHandler(os.Stdout, &tint.Options{Level: slog.LevelDebug}))

	router := application.NewRouter(&application.RouterConfig{
		GinMode: vars.GinMode,
	})

	{{- if ne .Database.String "none" }}
	db, err := application.NewDB(&application.DBConfig{
		{{- if eq .Database.String "sqlite3" }}
		DatabaseConnString: filepath.Join(rootPath, "..", vars.DatabaseConnString),
		{{- else }}
		DatabaseConnString: vars.DatabaseConnString,
		{{- end }}
		MigrateDatabase:    vars.MigrateDatabase,
	})
	if err != nil {
		log.Fatal("failed to create DB", err)
	}
	{{- end }}

	{{- if .SMTP }}
	mailer := smtp.NewMockMailer()
	{{- end }}

	{{- if .Storage }}
	storage := storage.NewMockStorage()
	{{- end }}

	{{- if .Redis }}
	rdb := redis.NewClient(&redis.Options{
		Addr:     vars.RedisAddr,
		Password: vars.RedisPassword,
		DB:       vars.RedisDB,
	})
	{{- end }}

	sqs := queue.NewMockQueue()


	{{- if .OAuthGoogle }}
	mockGoogleOAuth := oauth.NewMockGoogleOAuth()
	mockGoogleOAuth.Config.RedirectURL = vars.BaseURL + "/api/auth/google/callback"
	{{- end }}
	{{- if .OAuthFacebook }}
	mockFacebookOAuth := oauth.NewMockFacebookOAuth()
	mockFacebookOAuth.Config.RedirectURL = vars.BaseURL + "/api/auth/facebook/callback"
	{{- end }}
	{{- if .OAuthGitHub }}
	mockGitHubOAuth := oauth.NewMockGitHubOAuth()
	mockGitHubOAuth.Config.RedirectURL = vars.BaseURL + "/api/auth/github/callback"
	{{- end }}
	{{- if .OAuthLinkedIn }}
	mockLinkedInOAuth := oauth.NewMockLinkedInOAuth()
	mockLinkedInOAuth.Config.RedirectURL = vars.BaseURL + "/api/auth/linkedin/callback"
	{{- end }}
	{{- if .OAuthInstagram }}
	mockInstagramOAuth := oauth.NewMockInstagramOAuth()
	mockInstagramOAuth.Config.RedirectURL = vars.BaseURL + "/api/auth/instagram/callback"
	{{- end }}
	{{- if .OAuthDiscord }}
	mockDiscordOAuth := oauth.NewMockDiscordOAuth()
	mockDiscordOAuth.Config.RedirectURL = vars.BaseURL + "/api/auth/discord/callback"
	{{- end }}

	app, err := application.New(&application.Config{
		Environment: vars.Environment,
		BaseURL: vars.BaseURL,
		Port:    vars.Port,
		{{- if ne .Database.String "none" }}
		DB:      db,
		{{- end }}
		Router:  router,
		{{- if .SMTP }}
		Mailer:  mailer,
		{{- end }}
		{{- if .Storage }}
		Storage: storage,
		{{- end }}
		Logger: logger,
		{{- if .Redis }}
		Redis: rdb,
		{{- end }}
		{{- if eq .BackgroundJob "sqs" }}
		Queue: sqs,
		{{- end }}
		{{- if .OAuthGoogle }}
		GoogleOAuth:    mockGoogleOAuth,
		{{- end }}
		{{- if .OAuthFacebook }}
		FacebookOAuth:  mockFacebookOAuth,
		{{- end }}
		{{- if .OAuthGitHub }}
		GitHubOAuth:    mockGitHubOAuth,
		{{- end }}
		{{- if .OAuthLinkedIn }}
		LinkedInOAuth:  mockLinkedInOAuth,
		{{- end }}
		{{- if .OAuthInstagram }}
		InstagramOAuth: mockInstagramOAuth,
		{{- end }}
		{{- if .OAuthDiscord }}
		DiscordOAuth:   mockDiscordOAuth,
		{{- end }}
	})
	if err != nil {
		log.Fatal("failed to create application", err)
	}

	{{- if ne .Database.String "none" }}
	query := repo.New(db)
	{{- end }}

	return &TestApplication{
		Application: app,
		{{- if ne .Database.String "none" }}
		Query:       query,
		{{- end }}
	}, nil
}
