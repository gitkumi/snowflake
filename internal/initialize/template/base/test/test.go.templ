package test

import (
	"{{ .Name }}/internal/application"
	"{{ .Name }}/internal/env"
	{{- if ne .Database.String "none"}}
	"{{ .Name }}/internal/repo"
	{{- end }}
	{{- if .SMTP }}
	"{{ .Name }}/internal/smtp"
	{{- end }}
	{{- if .Storage }}
	"{{ .Name }}/internal/storage"
	{{- end }}
	{{- if eq .Database.String "sqlite3" }}
	"path/filepath"
	{{- end }}
	"log"
	"log/slog"
	"os"

	"github.com/lmittmann/tint"
	{{- if ne .Database.String "none" }}
	_ "{{ .Database.Import }}"
	{{- end }}
)

type TestApplication struct {
	Application *application.Application
	{{- if ne .Database.String "none" }}
	Query       *repo.Queries
	{{- end }}
}

func Init() (*TestApplication, error) {
	{{- if eq .Database.String "sqlite3" }}
	rootPath, err := vars.FindFilePath("go.mod")
	if err != nil {
		log.Fatal("failed to read environment variables", err)
	}
	{{- end }}

	vars, err := env.Read(".env.test")
	if err != nil {
		log.Fatal("failed to read environment variables", err)
	}

	router := application.NewRouter(&application.RouterConfig{
		GinMode: vars.GinMode,
	})

	{{- if ne .Database.String "none" }}
	db, err := application.NewDB(&application.DBConfig{
		{{- if eq .Database.String "sqlite3" }}
		DatabaseConnString: filepath.Join(rootPath, "..", vars.DatabaseConnString),
		{{- else }}
		DatabaseConnString: vars.DatabaseConnString,
		{{- end }}
		MigrateDatabase:    vars.MigrateDatabase,
	})
	if err != nil {
		log.Fatal("failed to create DB", err)
	}
	{{- end }}

	{{- if .SMTP }}
	mailer := smtp.NewMockMailer()
	{{- end }}

	{{- if .Storage }}
	storage := storage.NewMockStorage()
	{{- end }}

	logger := slog.New(tint.NewHandler(os.Stdout, &tint.Options{Level: slog.LevelDebug}))

	appEnv := env.Environment(vars.Environment)
	if !appEnv.IsValid() {
		log.Fatalf("invalid environment: '%s'", vars.Environment)
	}

	app, err := application.New(&application.Config{
		Environment: appEnv,
		BaseURL: vars.BaseURL,
		Port:    vars.Port,
		{{- if ne .Database.String "none" }}
		DB:      db,
		{{- end }}
		Router:  router,
		{{- if .SMTP }}
		Mailer:  mailer,
		{{- end }}
		{{- if .Storage }}
		Storage: storage,
		{{- end }}
		Logger: logger,
	})
	if err != nil {
		log.Fatal("failed to create application", err)
	}

	{{- if ne .Database.String "none" }}
	query := repo.New(db)
	{{- end }}

	return &TestApplication{
		Application: app,
		{{- if ne .Database.String "none" }}
		Query:       query,
		{{- end }}
	}, nil
}
