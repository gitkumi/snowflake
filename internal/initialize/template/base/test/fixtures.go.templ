package test

import (
	"{{ .Name }}/internal/password"
	"{{ .Name }}/internal/repo"
	"context"
	"database/sql"
	"log"
	"reflect"

	"github.com/jaswdr/faker"
	"github.com/matoous/go-nanoid/v2"
)

func isZeroValue(v reflect.Value) bool {
	zeroValue := reflect.Zero(v.Type())
	return reflect.DeepEqual(v.Interface(), zeroValue.Interface())
}

func mergeParams[T any](left, right T) T {
	leftValue := reflect.ValueOf(&left).Elem()
	rightValue := reflect.ValueOf(&right).Elem()

	for i := 0; i < leftValue.NumField(); i++ {
		leftField := leftValue.Field(i)
		rightField := rightValue.Field(i)

		if !isZeroValue(rightField) {
			leftField.Set(rightField)
		}
	}

	return left
}

func (t TestApplication) CreateBookFixture(custom repo.CreateBookParams) repo.Book {
	ctx := context.Background()
	fake := faker.New()

	defaultData := repo.CreateBookParams{
		Title: fake.Lorem().Sentence(1),
	}

	merged := mergeParams(defaultData, custom)
	res, err := t.Query.CreateBook(ctx, merged)
	if err != nil {
		log.Fatal(err)
	}

	{{- if eq .Database.String "mysql"}}
	id, err := res.LastInsertId()
	if err != nil {
		log.Fatal(err)
	}

	book, err := t.Query.GetBook(ctx, id)
	if err != nil {
		log.Fatal(err)
	}

	return book
	{{- else }}
	return res
	{{- end }}
}

{{- if .Auth }}
func (t TestApplication) CreateUserFixture(custom repo.CreateUserParams) repo.User {
	ctx := context.Background()
	fake := faker.New()

	nanoid, _ := gonanoid.New()

	hashed, _ := password.HashPassword("notsecure")

	defaultData := repo.CreateUserParams{
		HashedPassword: sql.NullString{
			String: hashed,
			Valid:  true,
		},
		Username: nanoid,
		Email:    nanoid + "@example.com",
		FirstName: sql.NullString{
			String: fake.Lorem().Text(10),
			Valid:  true,
		},
		LastName: sql.NullString{
			String: fake.Lorem().Text(10),
			Valid:  true,
		},
	}

	merged := mergeParams(defaultData, custom)
	res, err := t.Query.CreateUser(ctx, merged)
	if err != nil {
		log.Fatal(err)
	}

	{{- if eq .Database.String "mysql"}}
		id, err := res.LastInsertId()
		if err != nil {
			log.Fatal(err)
		}

		user, err := t.Query.GetUser(ctx, id)
		if err != nil {
			log.Fatal(err)
		}

		return user
	{{- else }}
	return res
	{{- end }}
}

func (t TestApplication) CreateOrganizationFixture(custom repo.CreateOrganizationParams) repo.Organization {
	ctx := context.Background()
	fake := faker.New()

	defaultData := repo.CreateOrganizationParams{
		Name: fake.Beer().Name(),
		Type: "personal",
	}

	merged := mergeParams(defaultData, custom)
	res, err := t.Query.CreateOrganization(ctx, merged)
	if err != nil {
		log.Fatal(err)
	}

	{{- if eq .Database.String "mysql"}}
	id, err := res.LastInsertId()
	if err != nil {
		log.Fatal(err)
	}

	org, err := t.Query.GetOrganization(ctx, id)
	if err != nil {
		log.Fatal(err)
	}

	return org
	{{- else }}
	return res
	{{- end }}
}

func (t TestApplication) CreateMembershipFixture(custom repo.CreateMembershipParams) (repo.Organization, repo.User, repo.Membership) {
	ctx := context.Background()

	var user repo.User
	var org repo.Organization

	if custom.UserID == 0 {
		user = t.CreateUserFixture(repo.CreateUserParams{})
	} else {
		user, _ = t.Query.GetUser(ctx, custom.UserID)
	}

	if custom.OrganizationID == 0 {
		org = t.CreateOrganizationFixture(repo.CreateOrganizationParams{})
	} else {
		org, _ = t.Query.GetOrganization(ctx, custom.OrganizationID)
	}

	defaultData := repo.CreateMembershipParams{
		UserID:         user.ID,
		OrganizationID: org.ID,
		Role:           "owner",
	}
	merged := mergeParams(defaultData, custom)

	res, err := t.Query.CreateMembership(ctx, merged)
	if err != nil {
		log.Fatal(err)
	}

	{{- if eq .Database.String "mysql"}}
	id, err := res.LastInsertId()
	if err != nil {
		log.Fatal(err)
	}

	mem, err := t.Query.GetMembership(ctx, id)
	if err != nil {
		log.Fatal(err)
	}

	return org, user, mem
	{{- else }}
	return org, user, res
	{{- end }}
}

func (t TestApplication) CreateTokenFixture(custom repo.CreateUserAuthTokenParams) repo.UserAuthToken {
	ctx := context.Background()

	var user repo.User

	if custom.UserID == 0 {
		user = t.CreateUserFixture(repo.CreateUserParams{})
	} else {
		user, _ = t.Query.GetUser(ctx, custom.UserID)
	}

	nanoid, _ := gonanoid.New()

	defaultData := repo.CreateUserAuthTokenParams{
		ID:     nanoid,
		UserID: user.ID,
		Type:   "confirm_email",
	}

	merged := mergeParams(defaultData, custom)
	{{- if eq .Database.String "mysql"}}
	_, err := t.Query.CreateUserAuthToken(ctx, merged)
	if err != nil {
		log.Fatal(err)
	}

	token, err := t.Query.GetUserAuthToken(ctx, merged.ID)
	if err != nil {
		log.Fatal(err)
	}

	return token
	{{- else }}
	res, err := t.Query.CreateUserAuthToken(ctx, merged)
	if err != nil {
		log.Fatal(err)
	}

	return res
	{{- end }}
}
{{- end }}
