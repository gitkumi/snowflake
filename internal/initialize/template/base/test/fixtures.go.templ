package test

import (
	"{{ .Name }}/cmd/api/repo"
	"context"
	"log"
	"reflect"

	"github.com/jaswdr/faker"
)

func isZeroValue(v reflect.Value) bool {
	zeroValue := reflect.Zero(v.Type())
	return reflect.DeepEqual(v.Interface(), zeroValue.Interface())
}

func mergeParams[T any](left, right T) T {
	leftValue := reflect.ValueOf(&left).Elem()
	rightValue := reflect.ValueOf(&right).Elem()

	for i := 0; i < leftValue.NumField(); i++ {
		leftField := leftValue.Field(i)
		rightField := rightValue.Field(i)

		if !isZeroValue(rightField) {
			leftField.Set(rightField)
		}
	}

	return left
}

func (t TestApplication) CreateBookFixture(custom repo.CreateBookParams) repo.Book {
	ctx := context.Background()
	fake := faker.New()

	defaultData := repo.CreateBookParams{
		Title: fake.Lorem().Sentence(1),
	}

	merged := mergeParams(defaultData, custom)
	res, err := t.Query.CreateBook(ctx, merged)
	if err != nil {
		log.Fatal(err)
	}

	{{- if eq .Database.String "mysql"}}
	id, err := res.LastInsertId()
	if err != nil {
		log.Fatal(err)
	}

	book, err := t.Query.GetBook(ctx, id)
	if err != nil {
		log.Fatal(err)
	}
	return book
	{{- else }}
	return res
	{{- end }}
}
